// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// Definition of Container operations for the Azure Backup extension with
    /// RecoveryService Vault.
    /// </summary>
    internal partial class ContainerOperation : IServiceOperations<RecoveryServicesBackupManagementClient>, IContainerOperation
    {
        /// <summary>
        /// Initializes a new instance of the ContainerOperation class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ContainerOperation(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the status of container operation
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='fabricName'>
        /// Optional. Backup Fabric name for the backup item
        /// </param>
        /// <param name='containerName'>
        /// Required. Container Name for container operation.
        /// </param>
        /// <param name='operationId'>
        /// Required. Operation ID of container operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a ProtectionContainerResponse.
        /// </returns>
        public async Task<ProtectionContainerResponse> GetContainerOperationResultAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetContainerOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            if (fabricName != null)
            {
                url = url + Uri.EscapeDataString(fabricName);
            }
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionContainerResource itemInstance = new ProtectionContainerResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["containerType"]);
                                if (typeName == "ProtectionContainer")
                                {
                                    ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        protectionContainerInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken registrationStatusValue = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue != null && registrationStatusValue.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance = ((string)registrationStatusValue);
                                        protectionContainerInstance.RegistrationStatus = registrationStatusInstance;
                                    }
                                    
                                    JToken healthStatusValue = propertiesValue["healthStatus"];
                                    if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance = ((string)healthStatusValue);
                                        protectionContainerInstance.HealthStatus = healthStatusInstance;
                                    }
                                    
                                    JToken containerTypeValue = propertiesValue["containerType"];
                                    if (containerTypeValue != null && containerTypeValue.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance = ((string)containerTypeValue);
                                        protectionContainerInstance.ContainerType = containerTypeInstance;
                                    }
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionContainerInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    itemInstance.Properties = protectionContainerInstance;
                                }
                                if (typeName == "IaaSVMContainer")
                                {
                                    AzureIaasVmProtectionContainer azureIaasVmProtectionContainerInstance = new AzureIaasVmProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                        azureIaasVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                    }
                                    
                                    JToken resourceGroupValue = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue != null && resourceGroupValue.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance = ((string)resourceGroupValue);
                                        azureIaasVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance;
                                    }
                                    
                                    JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                        azureIaasVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        azureIaasVmProtectionContainerInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken registrationStatusValue2 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue2 != null && registrationStatusValue2.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance2 = ((string)registrationStatusValue2);
                                        azureIaasVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance2;
                                    }
                                    
                                    JToken healthStatusValue2 = propertiesValue["healthStatus"];
                                    if (healthStatusValue2 != null && healthStatusValue2.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance2 = ((string)healthStatusValue2);
                                        azureIaasVmProtectionContainerInstance.HealthStatus = healthStatusInstance2;
                                    }
                                    
                                    JToken containerTypeValue2 = propertiesValue["containerType"];
                                    if (containerTypeValue2 != null && containerTypeValue2.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance2 = ((string)containerTypeValue2);
                                        azureIaasVmProtectionContainerInstance.ContainerType = containerTypeInstance2;
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaasVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    itemInstance.Properties = azureIaasVmProtectionContainerInstance;
                                }
                                if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                {
                                    AzureIaasVmClassicComputeProtectionContainer azureIaasVmClassicComputeProtectionContainerInstance = new AzureIaasVmClassicComputeProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue2 = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue2 != null && virtualMachineVersionValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance2 = ((string)virtualMachineVersionValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance2;
                                    }
                                    
                                    JToken resourceGroupValue2 = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue2 != null && resourceGroupValue2.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance2 = ((string)resourceGroupValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.ResourceGroup = resourceGroupInstance2;
                                    }
                                    
                                    JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.FriendlyName = friendlyNameInstance3;
                                    }
                                    
                                    JToken registrationStatusValue3 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue3 != null && registrationStatusValue3.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance3 = ((string)registrationStatusValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.RegistrationStatus = registrationStatusInstance3;
                                    }
                                    
                                    JToken healthStatusValue3 = propertiesValue["healthStatus"];
                                    if (healthStatusValue3 != null && healthStatusValue3.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance3 = ((string)healthStatusValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.HealthStatus = healthStatusInstance3;
                                    }
                                    
                                    JToken containerTypeValue3 = propertiesValue["containerType"];
                                    if (containerTypeValue3 != null && containerTypeValue3.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance3 = ((string)containerTypeValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.ContainerType = containerTypeInstance3;
                                    }
                                    
                                    JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance3;
                                    }
                                    itemInstance.Properties = azureIaasVmClassicComputeProtectionContainerInstance;
                                }
                                if (typeName == "Microsoft.Compute/virtualMachines")
                                {
                                    AzureIaasComputeVmProtectionContainer azureIaasComputeVmProtectionContainerInstance = new AzureIaasComputeVmProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue3 = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue3 != null && virtualMachineVersionValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance3 = ((string)virtualMachineVersionValue3);
                                        azureIaasComputeVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance3;
                                    }
                                    
                                    JToken resourceGroupValue3 = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue3 != null && resourceGroupValue3.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance3 = ((string)resourceGroupValue3);
                                        azureIaasComputeVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance3;
                                    }
                                    
                                    JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                        azureIaasComputeVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance3;
                                    }
                                    
                                    JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                        azureIaasComputeVmProtectionContainerInstance.FriendlyName = friendlyNameInstance4;
                                    }
                                    
                                    JToken registrationStatusValue4 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue4 != null && registrationStatusValue4.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance4 = ((string)registrationStatusValue4);
                                        azureIaasComputeVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance4;
                                    }
                                    
                                    JToken healthStatusValue4 = propertiesValue["healthStatus"];
                                    if (healthStatusValue4 != null && healthStatusValue4.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance4 = ((string)healthStatusValue4);
                                        azureIaasComputeVmProtectionContainerInstance.HealthStatus = healthStatusInstance4;
                                    }
                                    
                                    JToken containerTypeValue4 = propertiesValue["containerType"];
                                    if (containerTypeValue4 != null && containerTypeValue4.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance4 = ((string)containerTypeValue4);
                                        azureIaasComputeVmProtectionContainerInstance.ContainerType = containerTypeInstance4;
                                    }
                                    
                                    JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                        azureIaasComputeVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance4;
                                    }
                                    itemInstance.Properties = azureIaasComputeVmProtectionContainerInstance;
                                }
                                if (typeName == "DPMContainer")
                                {
                                    DpmProtectionContainer dpmProtectionContainerInstance = new DpmProtectionContainer();
                                    
                                    JToken canReRegisterValue = propertiesValue["canReRegister"];
                                    if (canReRegisterValue != null && canReRegisterValue.Type != JTokenType.Null)
                                    {
                                        bool canReRegisterInstance = ((bool)canReRegisterValue);
                                        dpmProtectionContainerInstance.CanReRegister = canReRegisterInstance;
                                    }
                                    
                                    JToken containerIdValue = propertiesValue["containerId"];
                                    if (containerIdValue != null && containerIdValue.Type != JTokenType.Null)
                                    {
                                        long containerIdInstance = ((long)containerIdValue);
                                        dpmProtectionContainerInstance.ContainerId = containerIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue5 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue5 != null && friendlyNameValue5.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance5 = ((string)friendlyNameValue5);
                                        dpmProtectionContainerInstance.FriendlyName = friendlyNameInstance5;
                                    }
                                    
                                    JToken registrationStatusValue5 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue5 != null && registrationStatusValue5.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance5 = ((string)registrationStatusValue5);
                                        dpmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance5;
                                    }
                                    
                                    JToken healthStatusValue5 = propertiesValue["healthStatus"];
                                    if (healthStatusValue5 != null && healthStatusValue5.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance5 = ((string)healthStatusValue5);
                                        dpmProtectionContainerInstance.HealthStatus = healthStatusInstance5;
                                    }
                                    
                                    JToken containerTypeValue5 = propertiesValue["containerType"];
                                    if (containerTypeValue5 != null && containerTypeValue5.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance5 = ((string)containerTypeValue5);
                                        dpmProtectionContainerInstance.ContainerType = containerTypeInstance5;
                                    }
                                    
                                    JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                        dpmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance5;
                                    }
                                    itemInstance.Properties = dpmProtectionContainerInstance;
                                }
                                if (typeName == "MABContainer")
                                {
                                    MabProtectionContainer mabProtectionContainerInstance = new MabProtectionContainer();
                                    
                                    JToken canReRegisterValue2 = propertiesValue["canReRegister"];
                                    if (canReRegisterValue2 != null && canReRegisterValue2.Type != JTokenType.Null)
                                    {
                                        bool canReRegisterInstance2 = ((bool)canReRegisterValue2);
                                        mabProtectionContainerInstance.CanReRegister = canReRegisterInstance2;
                                    }
                                    
                                    JToken containerIdValue2 = propertiesValue["containerId"];
                                    if (containerIdValue2 != null && containerIdValue2.Type != JTokenType.Null)
                                    {
                                        long containerIdInstance2 = ((long)containerIdValue2);
                                        mabProtectionContainerInstance.ContainerId = containerIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue6 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue6 != null && friendlyNameValue6.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance6 = ((string)friendlyNameValue6);
                                        mabProtectionContainerInstance.FriendlyName = friendlyNameInstance6;
                                    }
                                    
                                    JToken registrationStatusValue6 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue6 != null && registrationStatusValue6.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance6 = ((string)registrationStatusValue6);
                                        mabProtectionContainerInstance.RegistrationStatus = registrationStatusInstance6;
                                    }
                                    
                                    JToken healthStatusValue6 = propertiesValue["healthStatus"];
                                    if (healthStatusValue6 != null && healthStatusValue6.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance6 = ((string)healthStatusValue6);
                                        mabProtectionContainerInstance.HealthStatus = healthStatusInstance6;
                                    }
                                    
                                    JToken containerTypeValue6 = propertiesValue["containerType"];
                                    if (containerTypeValue6 != null && containerTypeValue6.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance6 = ((string)containerTypeValue6);
                                        mabProtectionContainerInstance.ContainerType = containerTypeInstance6;
                                    }
                                    
                                    JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                        mabProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance6;
                                    }
                                    itemInstance.Properties = mabProtectionContainerInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of container operation by URL
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a ProtectionContainerResponse.
        /// </returns>
        public async Task<ProtectionContainerResponse> GetContainerOperationResultByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetContainerOperationResultByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionContainerResource itemInstance = new ProtectionContainerResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["containerType"]);
                                if (typeName == "ProtectionContainer")
                                {
                                    ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        protectionContainerInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken registrationStatusValue = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue != null && registrationStatusValue.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance = ((string)registrationStatusValue);
                                        protectionContainerInstance.RegistrationStatus = registrationStatusInstance;
                                    }
                                    
                                    JToken healthStatusValue = propertiesValue["healthStatus"];
                                    if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance = ((string)healthStatusValue);
                                        protectionContainerInstance.HealthStatus = healthStatusInstance;
                                    }
                                    
                                    JToken containerTypeValue = propertiesValue["containerType"];
                                    if (containerTypeValue != null && containerTypeValue.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance = ((string)containerTypeValue);
                                        protectionContainerInstance.ContainerType = containerTypeInstance;
                                    }
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionContainerInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    itemInstance.Properties = protectionContainerInstance;
                                }
                                if (typeName == "IaaSVMContainer")
                                {
                                    AzureIaasVmProtectionContainer azureIaasVmProtectionContainerInstance = new AzureIaasVmProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                        azureIaasVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                    }
                                    
                                    JToken resourceGroupValue = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue != null && resourceGroupValue.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance = ((string)resourceGroupValue);
                                        azureIaasVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance;
                                    }
                                    
                                    JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                        azureIaasVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        azureIaasVmProtectionContainerInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken registrationStatusValue2 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue2 != null && registrationStatusValue2.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance2 = ((string)registrationStatusValue2);
                                        azureIaasVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance2;
                                    }
                                    
                                    JToken healthStatusValue2 = propertiesValue["healthStatus"];
                                    if (healthStatusValue2 != null && healthStatusValue2.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance2 = ((string)healthStatusValue2);
                                        azureIaasVmProtectionContainerInstance.HealthStatus = healthStatusInstance2;
                                    }
                                    
                                    JToken containerTypeValue2 = propertiesValue["containerType"];
                                    if (containerTypeValue2 != null && containerTypeValue2.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance2 = ((string)containerTypeValue2);
                                        azureIaasVmProtectionContainerInstance.ContainerType = containerTypeInstance2;
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaasVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    itemInstance.Properties = azureIaasVmProtectionContainerInstance;
                                }
                                if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                {
                                    AzureIaasVmClassicComputeProtectionContainer azureIaasVmClassicComputeProtectionContainerInstance = new AzureIaasVmClassicComputeProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue2 = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue2 != null && virtualMachineVersionValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance2 = ((string)virtualMachineVersionValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance2;
                                    }
                                    
                                    JToken resourceGroupValue2 = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue2 != null && resourceGroupValue2.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance2 = ((string)resourceGroupValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.ResourceGroup = resourceGroupInstance2;
                                    }
                                    
                                    JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                        azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.FriendlyName = friendlyNameInstance3;
                                    }
                                    
                                    JToken registrationStatusValue3 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue3 != null && registrationStatusValue3.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance3 = ((string)registrationStatusValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.RegistrationStatus = registrationStatusInstance3;
                                    }
                                    
                                    JToken healthStatusValue3 = propertiesValue["healthStatus"];
                                    if (healthStatusValue3 != null && healthStatusValue3.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance3 = ((string)healthStatusValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.HealthStatus = healthStatusInstance3;
                                    }
                                    
                                    JToken containerTypeValue3 = propertiesValue["containerType"];
                                    if (containerTypeValue3 != null && containerTypeValue3.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance3 = ((string)containerTypeValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.ContainerType = containerTypeInstance3;
                                    }
                                    
                                    JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                        azureIaasVmClassicComputeProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance3;
                                    }
                                    itemInstance.Properties = azureIaasVmClassicComputeProtectionContainerInstance;
                                }
                                if (typeName == "Microsoft.Compute/virtualMachines")
                                {
                                    AzureIaasComputeVmProtectionContainer azureIaasComputeVmProtectionContainerInstance = new AzureIaasComputeVmProtectionContainer();
                                    
                                    JToken virtualMachineVersionValue3 = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue3 != null && virtualMachineVersionValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance3 = ((string)virtualMachineVersionValue3);
                                        azureIaasComputeVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance3;
                                    }
                                    
                                    JToken resourceGroupValue3 = propertiesValue["resourceGroup"];
                                    if (resourceGroupValue3 != null && resourceGroupValue3.Type != JTokenType.Null)
                                    {
                                        string resourceGroupInstance3 = ((string)resourceGroupValue3);
                                        azureIaasComputeVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance3;
                                    }
                                    
                                    JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                        azureIaasComputeVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance3;
                                    }
                                    
                                    JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                        azureIaasComputeVmProtectionContainerInstance.FriendlyName = friendlyNameInstance4;
                                    }
                                    
                                    JToken registrationStatusValue4 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue4 != null && registrationStatusValue4.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance4 = ((string)registrationStatusValue4);
                                        azureIaasComputeVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance4;
                                    }
                                    
                                    JToken healthStatusValue4 = propertiesValue["healthStatus"];
                                    if (healthStatusValue4 != null && healthStatusValue4.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance4 = ((string)healthStatusValue4);
                                        azureIaasComputeVmProtectionContainerInstance.HealthStatus = healthStatusInstance4;
                                    }
                                    
                                    JToken containerTypeValue4 = propertiesValue["containerType"];
                                    if (containerTypeValue4 != null && containerTypeValue4.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance4 = ((string)containerTypeValue4);
                                        azureIaasComputeVmProtectionContainerInstance.ContainerType = containerTypeInstance4;
                                    }
                                    
                                    JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                        azureIaasComputeVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance4;
                                    }
                                    itemInstance.Properties = azureIaasComputeVmProtectionContainerInstance;
                                }
                                if (typeName == "DPMContainer")
                                {
                                    DpmProtectionContainer dpmProtectionContainerInstance = new DpmProtectionContainer();
                                    
                                    JToken canReRegisterValue = propertiesValue["canReRegister"];
                                    if (canReRegisterValue != null && canReRegisterValue.Type != JTokenType.Null)
                                    {
                                        bool canReRegisterInstance = ((bool)canReRegisterValue);
                                        dpmProtectionContainerInstance.CanReRegister = canReRegisterInstance;
                                    }
                                    
                                    JToken containerIdValue = propertiesValue["containerId"];
                                    if (containerIdValue != null && containerIdValue.Type != JTokenType.Null)
                                    {
                                        long containerIdInstance = ((long)containerIdValue);
                                        dpmProtectionContainerInstance.ContainerId = containerIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue5 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue5 != null && friendlyNameValue5.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance5 = ((string)friendlyNameValue5);
                                        dpmProtectionContainerInstance.FriendlyName = friendlyNameInstance5;
                                    }
                                    
                                    JToken registrationStatusValue5 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue5 != null && registrationStatusValue5.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance5 = ((string)registrationStatusValue5);
                                        dpmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance5;
                                    }
                                    
                                    JToken healthStatusValue5 = propertiesValue["healthStatus"];
                                    if (healthStatusValue5 != null && healthStatusValue5.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance5 = ((string)healthStatusValue5);
                                        dpmProtectionContainerInstance.HealthStatus = healthStatusInstance5;
                                    }
                                    
                                    JToken containerTypeValue5 = propertiesValue["containerType"];
                                    if (containerTypeValue5 != null && containerTypeValue5.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance5 = ((string)containerTypeValue5);
                                        dpmProtectionContainerInstance.ContainerType = containerTypeInstance5;
                                    }
                                    
                                    JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                        dpmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance5;
                                    }
                                    itemInstance.Properties = dpmProtectionContainerInstance;
                                }
                                if (typeName == "MABContainer")
                                {
                                    MabProtectionContainer mabProtectionContainerInstance = new MabProtectionContainer();
                                    
                                    JToken canReRegisterValue2 = propertiesValue["canReRegister"];
                                    if (canReRegisterValue2 != null && canReRegisterValue2.Type != JTokenType.Null)
                                    {
                                        bool canReRegisterInstance2 = ((bool)canReRegisterValue2);
                                        mabProtectionContainerInstance.CanReRegister = canReRegisterInstance2;
                                    }
                                    
                                    JToken containerIdValue2 = propertiesValue["containerId"];
                                    if (containerIdValue2 != null && containerIdValue2.Type != JTokenType.Null)
                                    {
                                        long containerIdInstance2 = ((long)containerIdValue2);
                                        mabProtectionContainerInstance.ContainerId = containerIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue6 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue6 != null && friendlyNameValue6.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance6 = ((string)friendlyNameValue6);
                                        mabProtectionContainerInstance.FriendlyName = friendlyNameInstance6;
                                    }
                                    
                                    JToken registrationStatusValue6 = propertiesValue["registrationStatus"];
                                    if (registrationStatusValue6 != null && registrationStatusValue6.Type != JTokenType.Null)
                                    {
                                        string registrationStatusInstance6 = ((string)registrationStatusValue6);
                                        mabProtectionContainerInstance.RegistrationStatus = registrationStatusInstance6;
                                    }
                                    
                                    JToken healthStatusValue6 = propertiesValue["healthStatus"];
                                    if (healthStatusValue6 != null && healthStatusValue6.Type != JTokenType.Null)
                                    {
                                        string healthStatusInstance6 = ((string)healthStatusValue6);
                                        mabProtectionContainerInstance.HealthStatus = healthStatusInstance6;
                                    }
                                    
                                    JToken containerTypeValue6 = propertiesValue["containerType"];
                                    if (containerTypeValue6 != null && containerTypeValue6.Type != JTokenType.Null)
                                    {
                                        string containerTypeInstance6 = ((string)containerTypeValue6);
                                        mabProtectionContainerInstance.ContainerType = containerTypeInstance6;
                                    }
                                    
                                    JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                        mabProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance6;
                                    }
                                    itemInstance.Properties = mabProtectionContainerInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of refresh container operation by OperationId
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='fabricName'>
        /// Optional. Backup Fabric name for the backup item
        /// </param>
        /// <param name='operationId'>
        /// Required. Operation ID of refresh container operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> GetRefreshOperationResultAsync(string resourceGroupName, string resourceName, string fabricName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetRefreshOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            if (fabricName != null)
            {
                url = url + Uri.EscapeDataString(fabricName);
            }
            url = url + "/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    result = new BaseRecoveryServicesJobResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of refresh container operation by URL
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> GetRefreshOperationResultByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetRefreshOperationResultByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all protection containers.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='queryParams'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a ProtectionContainerListResponse.
        /// </returns>
        public async Task<ProtectionContainerListResponse> ListAsync(string resourceGroupName, string resourceName, ProtectionContainerListQueryParams queryParams, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (queryParams == null)
            {
                throw new ArgumentNullException("queryParams");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryParams", queryParams);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupProtectionContainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            List<string> odataFilter = new List<string>();
            if (queryParams.ProviderType != null)
            {
                odataFilter.Add("providerType eq '" + Uri.EscapeDataString(queryParams.ProviderType) + "'");
            }
            if (queryParams.RegistrationStatus != null)
            {
                odataFilter.Add("status eq '" + Uri.EscapeDataString(queryParams.RegistrationStatus) + "'");
            }
            if (queryParams.FriendlyName != null)
            {
                odataFilter.Add("friendlyName eq '" + Uri.EscapeDataString(queryParams.FriendlyName) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionContainerListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionContainerListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionContainerResourceList itemListInstance = new ProtectionContainerResourceList();
                            result.ItemList = itemListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionContainerResource protectionContainerResourceInstance = new ProtectionContainerResource();
                                    itemListInstance.ProtectionContainers.Add(protectionContainerResourceInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["containerType"]);
                                        if (typeName == "ProtectionContainer")
                                        {
                                            ProtectionContainer protectionContainerInstance = new ProtectionContainer();
                                            
                                            JToken friendlyNameValue = propertiesValue["friendlyName"];
                                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance = ((string)friendlyNameValue);
                                                protectionContainerInstance.FriendlyName = friendlyNameInstance;
                                            }
                                            
                                            JToken registrationStatusValue = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue != null && registrationStatusValue.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance = ((string)registrationStatusValue);
                                                protectionContainerInstance.RegistrationStatus = registrationStatusInstance;
                                            }
                                            
                                            JToken healthStatusValue = propertiesValue["healthStatus"];
                                            if (healthStatusValue != null && healthStatusValue.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance = ((string)healthStatusValue);
                                                protectionContainerInstance.HealthStatus = healthStatusInstance;
                                            }
                                            
                                            JToken containerTypeValue = propertiesValue["containerType"];
                                            if (containerTypeValue != null && containerTypeValue.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance = ((string)containerTypeValue);
                                                protectionContainerInstance.ContainerType = containerTypeInstance;
                                            }
                                            
                                            JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                                protectionContainerInstance.BackupManagementType = backupManagementTypeInstance;
                                            }
                                            protectionContainerResourceInstance.Properties = protectionContainerInstance;
                                        }
                                        if (typeName == "IaaSVMContainer")
                                        {
                                            AzureIaasVmProtectionContainer azureIaasVmProtectionContainerInstance = new AzureIaasVmProtectionContainer();
                                            
                                            JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                            if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                            {
                                                string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                                azureIaasVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                            }
                                            
                                            JToken resourceGroupValue = propertiesValue["resourceGroup"];
                                            if (resourceGroupValue != null && resourceGroupValue.Type != JTokenType.Null)
                                            {
                                                string resourceGroupInstance = ((string)resourceGroupValue);
                                                azureIaasVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance;
                                            }
                                            
                                            JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                azureIaasVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance;
                                            }
                                            
                                            JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                azureIaasVmProtectionContainerInstance.FriendlyName = friendlyNameInstance2;
                                            }
                                            
                                            JToken registrationStatusValue2 = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue2 != null && registrationStatusValue2.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance2 = ((string)registrationStatusValue2);
                                                azureIaasVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance2;
                                            }
                                            
                                            JToken healthStatusValue2 = propertiesValue["healthStatus"];
                                            if (healthStatusValue2 != null && healthStatusValue2.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance2 = ((string)healthStatusValue2);
                                                azureIaasVmProtectionContainerInstance.HealthStatus = healthStatusInstance2;
                                            }
                                            
                                            JToken containerTypeValue2 = propertiesValue["containerType"];
                                            if (containerTypeValue2 != null && containerTypeValue2.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance2 = ((string)containerTypeValue2);
                                                azureIaasVmProtectionContainerInstance.ContainerType = containerTypeInstance2;
                                            }
                                            
                                            JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                                azureIaasVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance2;
                                            }
                                            protectionContainerResourceInstance.Properties = azureIaasVmProtectionContainerInstance;
                                        }
                                        if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                        {
                                            AzureIaasVmClassicComputeProtectionContainer azureIaasVmClassicComputeProtectionContainerInstance = new AzureIaasVmClassicComputeProtectionContainer();
                                            
                                            JToken virtualMachineVersionValue2 = propertiesValue["virtualMachineVersion"];
                                            if (virtualMachineVersionValue2 != null && virtualMachineVersionValue2.Type != JTokenType.Null)
                                            {
                                                string virtualMachineVersionInstance2 = ((string)virtualMachineVersionValue2);
                                                azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance2;
                                            }
                                            
                                            JToken resourceGroupValue2 = propertiesValue["resourceGroup"];
                                            if (resourceGroupValue2 != null && resourceGroupValue2.Type != JTokenType.Null)
                                            {
                                                string resourceGroupInstance2 = ((string)resourceGroupValue2);
                                                azureIaasVmClassicComputeProtectionContainerInstance.ResourceGroup = resourceGroupInstance2;
                                            }
                                            
                                            JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                                azureIaasVmClassicComputeProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance2;
                                            }
                                            
                                            JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                                azureIaasVmClassicComputeProtectionContainerInstance.FriendlyName = friendlyNameInstance3;
                                            }
                                            
                                            JToken registrationStatusValue3 = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue3 != null && registrationStatusValue3.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance3 = ((string)registrationStatusValue3);
                                                azureIaasVmClassicComputeProtectionContainerInstance.RegistrationStatus = registrationStatusInstance3;
                                            }
                                            
                                            JToken healthStatusValue3 = propertiesValue["healthStatus"];
                                            if (healthStatusValue3 != null && healthStatusValue3.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance3 = ((string)healthStatusValue3);
                                                azureIaasVmClassicComputeProtectionContainerInstance.HealthStatus = healthStatusInstance3;
                                            }
                                            
                                            JToken containerTypeValue3 = propertiesValue["containerType"];
                                            if (containerTypeValue3 != null && containerTypeValue3.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance3 = ((string)containerTypeValue3);
                                                azureIaasVmClassicComputeProtectionContainerInstance.ContainerType = containerTypeInstance3;
                                            }
                                            
                                            JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                                azureIaasVmClassicComputeProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance3;
                                            }
                                            protectionContainerResourceInstance.Properties = azureIaasVmClassicComputeProtectionContainerInstance;
                                        }
                                        if (typeName == "Microsoft.Compute/virtualMachines")
                                        {
                                            AzureIaasComputeVmProtectionContainer azureIaasComputeVmProtectionContainerInstance = new AzureIaasComputeVmProtectionContainer();
                                            
                                            JToken virtualMachineVersionValue3 = propertiesValue["virtualMachineVersion"];
                                            if (virtualMachineVersionValue3 != null && virtualMachineVersionValue3.Type != JTokenType.Null)
                                            {
                                                string virtualMachineVersionInstance3 = ((string)virtualMachineVersionValue3);
                                                azureIaasComputeVmProtectionContainerInstance.VirtualMachineVersion = virtualMachineVersionInstance3;
                                            }
                                            
                                            JToken resourceGroupValue3 = propertiesValue["resourceGroup"];
                                            if (resourceGroupValue3 != null && resourceGroupValue3.Type != JTokenType.Null)
                                            {
                                                string resourceGroupInstance3 = ((string)resourceGroupValue3);
                                                azureIaasComputeVmProtectionContainerInstance.ResourceGroup = resourceGroupInstance3;
                                            }
                                            
                                            JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                                azureIaasComputeVmProtectionContainerInstance.VirtualMachineId = virtualMachineIdInstance3;
                                            }
                                            
                                            JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                                azureIaasComputeVmProtectionContainerInstance.FriendlyName = friendlyNameInstance4;
                                            }
                                            
                                            JToken registrationStatusValue4 = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue4 != null && registrationStatusValue4.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance4 = ((string)registrationStatusValue4);
                                                azureIaasComputeVmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance4;
                                            }
                                            
                                            JToken healthStatusValue4 = propertiesValue["healthStatus"];
                                            if (healthStatusValue4 != null && healthStatusValue4.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance4 = ((string)healthStatusValue4);
                                                azureIaasComputeVmProtectionContainerInstance.HealthStatus = healthStatusInstance4;
                                            }
                                            
                                            JToken containerTypeValue4 = propertiesValue["containerType"];
                                            if (containerTypeValue4 != null && containerTypeValue4.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance4 = ((string)containerTypeValue4);
                                                azureIaasComputeVmProtectionContainerInstance.ContainerType = containerTypeInstance4;
                                            }
                                            
                                            JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                                azureIaasComputeVmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance4;
                                            }
                                            protectionContainerResourceInstance.Properties = azureIaasComputeVmProtectionContainerInstance;
                                        }
                                        if (typeName == "DPMContainer")
                                        {
                                            DpmProtectionContainer dpmProtectionContainerInstance = new DpmProtectionContainer();
                                            
                                            JToken canReRegisterValue = propertiesValue["canReRegister"];
                                            if (canReRegisterValue != null && canReRegisterValue.Type != JTokenType.Null)
                                            {
                                                bool canReRegisterInstance = ((bool)canReRegisterValue);
                                                dpmProtectionContainerInstance.CanReRegister = canReRegisterInstance;
                                            }
                                            
                                            JToken containerIdValue = propertiesValue["containerId"];
                                            if (containerIdValue != null && containerIdValue.Type != JTokenType.Null)
                                            {
                                                long containerIdInstance = ((long)containerIdValue);
                                                dpmProtectionContainerInstance.ContainerId = containerIdInstance;
                                            }
                                            
                                            JToken friendlyNameValue5 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue5 != null && friendlyNameValue5.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance5 = ((string)friendlyNameValue5);
                                                dpmProtectionContainerInstance.FriendlyName = friendlyNameInstance5;
                                            }
                                            
                                            JToken registrationStatusValue5 = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue5 != null && registrationStatusValue5.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance5 = ((string)registrationStatusValue5);
                                                dpmProtectionContainerInstance.RegistrationStatus = registrationStatusInstance5;
                                            }
                                            
                                            JToken healthStatusValue5 = propertiesValue["healthStatus"];
                                            if (healthStatusValue5 != null && healthStatusValue5.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance5 = ((string)healthStatusValue5);
                                                dpmProtectionContainerInstance.HealthStatus = healthStatusInstance5;
                                            }
                                            
                                            JToken containerTypeValue5 = propertiesValue["containerType"];
                                            if (containerTypeValue5 != null && containerTypeValue5.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance5 = ((string)containerTypeValue5);
                                                dpmProtectionContainerInstance.ContainerType = containerTypeInstance5;
                                            }
                                            
                                            JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                                dpmProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance5;
                                            }
                                            protectionContainerResourceInstance.Properties = dpmProtectionContainerInstance;
                                        }
                                        if (typeName == "MABContainer")
                                        {
                                            MabProtectionContainer mabProtectionContainerInstance = new MabProtectionContainer();
                                            
                                            JToken canReRegisterValue2 = propertiesValue["canReRegister"];
                                            if (canReRegisterValue2 != null && canReRegisterValue2.Type != JTokenType.Null)
                                            {
                                                bool canReRegisterInstance2 = ((bool)canReRegisterValue2);
                                                mabProtectionContainerInstance.CanReRegister = canReRegisterInstance2;
                                            }
                                            
                                            JToken containerIdValue2 = propertiesValue["containerId"];
                                            if (containerIdValue2 != null && containerIdValue2.Type != JTokenType.Null)
                                            {
                                                long containerIdInstance2 = ((long)containerIdValue2);
                                                mabProtectionContainerInstance.ContainerId = containerIdInstance2;
                                            }
                                            
                                            JToken friendlyNameValue6 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue6 != null && friendlyNameValue6.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance6 = ((string)friendlyNameValue6);
                                                mabProtectionContainerInstance.FriendlyName = friendlyNameInstance6;
                                            }
                                            
                                            JToken registrationStatusValue6 = propertiesValue["registrationStatus"];
                                            if (registrationStatusValue6 != null && registrationStatusValue6.Type != JTokenType.Null)
                                            {
                                                string registrationStatusInstance6 = ((string)registrationStatusValue6);
                                                mabProtectionContainerInstance.RegistrationStatus = registrationStatusInstance6;
                                            }
                                            
                                            JToken healthStatusValue6 = propertiesValue["healthStatus"];
                                            if (healthStatusValue6 != null && healthStatusValue6.Type != JTokenType.Null)
                                            {
                                                string healthStatusInstance6 = ((string)healthStatusValue6);
                                                mabProtectionContainerInstance.HealthStatus = healthStatusInstance6;
                                            }
                                            
                                            JToken containerTypeValue6 = propertiesValue["containerType"];
                                            if (containerTypeValue6 != null && containerTypeValue6.Type != JTokenType.Null)
                                            {
                                                string containerTypeInstance6 = ((string)containerTypeValue6);
                                                mabProtectionContainerInstance.ContainerType = containerTypeInstance6;
                                            }
                                            
                                            JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                                mabProtectionContainerInstance.BackupManagementType = backupManagementTypeInstance6;
                                            }
                                            protectionContainerResourceInstance.Properties = mabProtectionContainerInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectionContainerResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        protectionContainerResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectionContainerResourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectionContainerResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectionContainerResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        protectionContainerResourceInstance.ETag = eTagInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                itemListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Trigger the Discovery.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. Request header parameters.
        /// </param>
        /// <param name='fabricName'>
        /// Optional. Backup Fabric name for the backup item
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> RefreshAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, string fabricName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                tracingParameters.Add("fabricName", fabricName);
                TracingAdapter.Enter(invocationId, this, "RefreshAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            if (fabricName != null)
            {
                url = url + Uri.EscapeDataString(fabricName);
            }
            url = url + "/refreshContainers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unregister protection container
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Backup Fabric name for the backup item
        /// </param>
        /// <param name='containerName'>
        /// Required. Container Name of protectionContainers
        /// </param>
        /// <param name='request'>
        /// Required. Update request for protectionContainers
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> UnregisterAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, ProtectionContainerUpdateRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UnregisterAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (request.Item != null)
                {
                    JObject itemValue = new JObject();
                    requestDoc = itemValue;
                    
                    if (request.Item.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        itemValue["properties"] = propertiesValue;
                        if (request.Item.Properties is ProtectionContainer)
                        {
                            propertiesValue["containerType"] = "ProtectionContainer";
                            ProtectionContainer derived = ((ProtectionContainer)request.Item.Properties);
                            
                            if (derived.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived.FriendlyName;
                            }
                            
                            if (derived.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived.RegistrationStatus;
                            }
                            
                            if (derived.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived.HealthStatus;
                            }
                            
                            if (derived.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived.ContainerType;
                            }
                            
                            if (derived.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived.BackupManagementType;
                            }
                        }
                        if (request.Item.Properties is AzureIaasVmProtectionContainer)
                        {
                            propertiesValue["containerType"] = "IaaSVMContainer";
                            AzureIaasVmProtectionContainer derived2 = ((AzureIaasVmProtectionContainer)request.Item.Properties);
                            
                            if (derived2.VirtualMachineVersion != null)
                            {
                                propertiesValue["virtualMachineVersion"] = derived2.VirtualMachineVersion;
                            }
                            
                            if (derived2.ResourceGroup != null)
                            {
                                propertiesValue["resourceGroup"] = derived2.ResourceGroup;
                            }
                            
                            if (derived2.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived2.VirtualMachineId;
                            }
                            
                            if (derived2.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived2.FriendlyName;
                            }
                            
                            if (derived2.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived2.RegistrationStatus;
                            }
                            
                            if (derived2.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived2.HealthStatus;
                            }
                            
                            if (derived2.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived2.ContainerType;
                            }
                            
                            if (derived2.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived2.BackupManagementType;
                            }
                        }
                        if (request.Item.Properties is AzureIaasVmClassicComputeProtectionContainer)
                        {
                            propertiesValue["containerType"] = "Microsoft.ClassicCompute/virtualMachines";
                            AzureIaasVmClassicComputeProtectionContainer derived3 = ((AzureIaasVmClassicComputeProtectionContainer)request.Item.Properties);
                            
                            if (derived3.VirtualMachineVersion != null)
                            {
                                propertiesValue["virtualMachineVersion"] = derived3.VirtualMachineVersion;
                            }
                            
                            if (derived3.ResourceGroup != null)
                            {
                                propertiesValue["resourceGroup"] = derived3.ResourceGroup;
                            }
                            
                            if (derived3.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived3.VirtualMachineId;
                            }
                            
                            if (derived3.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived3.FriendlyName;
                            }
                            
                            if (derived3.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived3.RegistrationStatus;
                            }
                            
                            if (derived3.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived3.HealthStatus;
                            }
                            
                            if (derived3.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived3.ContainerType;
                            }
                            
                            if (derived3.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived3.BackupManagementType;
                            }
                        }
                        if (request.Item.Properties is AzureIaasComputeVmProtectionContainer)
                        {
                            propertiesValue["containerType"] = "Microsoft.Compute/virtualMachines";
                            AzureIaasComputeVmProtectionContainer derived4 = ((AzureIaasComputeVmProtectionContainer)request.Item.Properties);
                            
                            if (derived4.VirtualMachineVersion != null)
                            {
                                propertiesValue["virtualMachineVersion"] = derived4.VirtualMachineVersion;
                            }
                            
                            if (derived4.ResourceGroup != null)
                            {
                                propertiesValue["resourceGroup"] = derived4.ResourceGroup;
                            }
                            
                            if (derived4.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived4.VirtualMachineId;
                            }
                            
                            if (derived4.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived4.FriendlyName;
                            }
                            
                            if (derived4.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived4.RegistrationStatus;
                            }
                            
                            if (derived4.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived4.HealthStatus;
                            }
                            
                            if (derived4.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived4.ContainerType;
                            }
                            
                            if (derived4.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived4.BackupManagementType;
                            }
                        }
                        if (request.Item.Properties is DpmProtectionContainer)
                        {
                            propertiesValue["containerType"] = "DPMContainer";
                            DpmProtectionContainer derived5 = ((DpmProtectionContainer)request.Item.Properties);
                            
                            propertiesValue["canReRegister"] = derived5.CanReRegister;
                            
                            propertiesValue["containerId"] = derived5.ContainerId;
                            
                            if (derived5.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived5.FriendlyName;
                            }
                            
                            if (derived5.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived5.RegistrationStatus;
                            }
                            
                            if (derived5.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived5.HealthStatus;
                            }
                            
                            if (derived5.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived5.ContainerType;
                            }
                            
                            if (derived5.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived5.BackupManagementType;
                            }
                        }
                        if (request.Item.Properties is MabProtectionContainer)
                        {
                            propertiesValue["containerType"] = "MABContainer";
                            MabProtectionContainer derived6 = ((MabProtectionContainer)request.Item.Properties);
                            
                            propertiesValue["canReRegister"] = derived6.CanReRegister;
                            
                            propertiesValue["containerId"] = derived6.ContainerId;
                            
                            if (derived6.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived6.FriendlyName;
                            }
                            
                            if (derived6.RegistrationStatus != null)
                            {
                                propertiesValue["registrationStatus"] = derived6.RegistrationStatus;
                            }
                            
                            if (derived6.HealthStatus != null)
                            {
                                propertiesValue["healthStatus"] = derived6.HealthStatus;
                            }
                            
                            if (derived6.ContainerType != null)
                            {
                                propertiesValue["containerType"] = derived6.ContainerType;
                            }
                            
                            if (derived6.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived6.BackupManagementType;
                            }
                        }
                    }
                    
                    if (request.Item.Id != null)
                    {
                        itemValue["id"] = request.Item.Id;
                    }
                    
                    if (request.Item.Name != null)
                    {
                        itemValue["name"] = request.Item.Name;
                    }
                    
                    if (request.Item.Type != null)
                    {
                        itemValue["type"] = request.Item.Type;
                    }
                    
                    if (request.Item.Location != null)
                    {
                        itemValue["location"] = request.Item.Location;
                    }
                    
                    if (request.Item.Tags != null)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in request.Item.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        itemValue["tags"] = tagsDictionary;
                    }
                    
                    if (request.Item.ETag != null)
                    {
                        itemValue["eTag"] = request.Item.ETag;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
