// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// Definition of Alert operations for the Azure Backup extension.
    /// </summary>
    internal partial class AlertOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IAlertOperations
    {
        /// <summary>
        /// Initializes a new instance of the AlertOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AlertOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get the details of specific Alert.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='uniqueAlertId'>
        /// Required. uniqueAlertId for GetOperationResult.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a AlertItemResponse.
        /// </returns>
        public async Task<AlertResponse> GetAsync(string resourceGroupName, string resourceName, string uniqueAlertId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (uniqueAlertId == null)
            {
                throw new ArgumentNullException("uniqueAlertId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("uniqueAlertId", uniqueAlertId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/monitoringAlerts/";
            url = url + Uri.EscapeDataString(uniqueAlertId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AlertResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AlertResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        JToken alertResponseValue = responseDoc["AlertResponse"];
                        if (alertResponseValue != null && alertResponseValue.Type != JTokenType.Null)
                        {
                            AlertResponse alertResponseInstance = new AlertResponse();
                            
                            JToken propertiesValue = alertResponseValue["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                AlertResponseProperties propertiesInstance = new AlertResponseProperties();
                                alertResponseInstance.Properties = propertiesInstance;
                                
                                JToken alertTitleValue = propertiesValue["alertTitle"];
                                if (alertTitleValue != null && alertTitleValue.Type != JTokenType.Null)
                                {
                                    string alertTitleInstance = ((string)alertTitleValue);
                                    propertiesInstance.AlertTitle = alertTitleInstance;
                                }
                                
                                JToken isManuallyResolvableValue = propertiesValue["isManuallyResolvable"];
                                if (isManuallyResolvableValue != null && isManuallyResolvableValue.Type != JTokenType.Null)
                                {
                                    bool isManuallyResolvableInstance = ((bool)isManuallyResolvableValue);
                                    propertiesInstance.IsManuallyResolvable = isManuallyResolvableInstance;
                                }
                                
                                JToken initialOccurrenceTimeValue = propertiesValue["initialOccurrenceTime"];
                                if (initialOccurrenceTimeValue != null && initialOccurrenceTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime initialOccurrenceTimeInstance = ((DateTime)initialOccurrenceTimeValue);
                                    propertiesInstance.InitialOccurrenceTime = initialOccurrenceTimeInstance;
                                }
                                
                                JToken resolutionTimeValue = propertiesValue["resolutionTime"];
                                if (resolutionTimeValue != null && resolutionTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime resolutionTimeInstance = ((DateTime)resolutionTimeValue);
                                    propertiesInstance.ResolutionTime = resolutionTimeInstance;
                                }
                                
                                JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                {
                                    AlertDetailsExtendedInfo extendedInfoInstance = new AlertDetailsExtendedInfo();
                                    propertiesInstance.ExtendedInfo = extendedInfoInstance;
                                    
                                    JToken recommendedActionsArray = extendedInfoValue["recommendedActions"];
                                    if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                        {
                                            extendedInfoInstance.RecommendedActions.Add(((string)recommendedActionsValue));
                                        }
                                    }
                                    
                                    JToken possibleCausesArray = extendedInfoValue["possibleCauses"];
                                    if (possibleCausesArray != null && possibleCausesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken possibleCausesValue in ((JArray)possibleCausesArray))
                                        {
                                            extendedInfoInstance.PossibleCauses.Add(((string)possibleCausesValue));
                                        }
                                    }
                                    
                                    JToken descriptionValue = extendedInfoValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        extendedInfoInstance.Description = descriptionInstance;
                                    }
                                    
                                    JToken sourceIdValue = extendedInfoValue["sourceId"];
                                    if (sourceIdValue != null && sourceIdValue.Type != JTokenType.Null)
                                    {
                                        string sourceIdInstance = ((string)sourceIdValue);
                                        extendedInfoInstance.SourceId = sourceIdInstance;
                                    }
                                    
                                    JToken jobIdValue = extendedInfoValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        extendedInfoInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken resolutionMessageValue = extendedInfoValue["resolutionMessage"];
                                    if (resolutionMessageValue != null && resolutionMessageValue.Type != JTokenType.Null)
                                    {
                                        string resolutionMessageInstance = ((string)resolutionMessageValue);
                                        extendedInfoInstance.ResolutionMessage = resolutionMessageInstance;
                                    }
                                    
                                    JToken resolutionMethodValue = extendedInfoValue["resolutionMethod"];
                                    if (resolutionMethodValue != null && resolutionMethodValue.Type != JTokenType.Null)
                                    {
                                        ResolutionMethodEnum resolutionMethodInstance = ((ResolutionMethodEnum)Enum.Parse(typeof(ResolutionMethodEnum), ((string)resolutionMethodValue), true));
                                        extendedInfoInstance.ResolutionMethod = resolutionMethodInstance;
                                    }
                                    
                                    JToken additionalInfoSequenceElement = ((JToken)extendedInfoValue["additionalInfo"]);
                                    if (additionalInfoSequenceElement != null && additionalInfoSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in additionalInfoSequenceElement)
                                        {
                                            string additionalInfoKey = ((string)property.Name);
                                            string additionalInfoValue = ((string)property.Value);
                                            extendedInfoInstance.AdditionalInfo.Add(additionalInfoKey, additionalInfoValue);
                                        }
                                    }
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    AlertStatus statusInstance = ((AlertStatus)Enum.Parse(typeof(AlertStatus), ((string)statusValue), true));
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken categoryValue = propertiesValue["category"];
                                if (categoryValue != null && categoryValue.Type != JTokenType.Null)
                                {
                                    AlertCategory categoryInstance = ((AlertCategory)Enum.Parse(typeof(AlertCategory), ((string)categoryValue), true));
                                    propertiesInstance.Category = categoryInstance;
                                }
                                
                                JToken severityValue = propertiesValue["severity"];
                                if (severityValue != null && severityValue.Type != JTokenType.Null)
                                {
                                    AlertSeverity severityInstance = ((AlertSeverity)Enum.Parse(typeof(AlertSeverity), ((string)severityValue), true));
                                    propertiesInstance.Severity = severityInstance;
                                }
                                
                                JToken alertTypeValue = propertiesValue["alertType"];
                                if (alertTypeValue != null && alertTypeValue.Type != JTokenType.Null)
                                {
                                    AlertType alertTypeInstance = ((AlertType)Enum.Parse(typeof(AlertType), ((string)alertTypeValue), true));
                                    propertiesInstance.AlertType = alertTypeInstance;
                                }
                                
                                JToken instanceIdValue = propertiesValue["instanceId"];
                                if (instanceIdValue != null && instanceIdValue.Type != JTokenType.Null)
                                {
                                    string instanceIdInstance = ((string)instanceIdValue);
                                    propertiesInstance.InstanceId = instanceIdInstance;
                                }
                                
                                JToken sourceNameValue = propertiesValue["sourceName"];
                                if (sourceNameValue != null && sourceNameValue.Type != JTokenType.Null)
                                {
                                    string sourceNameInstance = ((string)sourceNameValue);
                                    propertiesInstance.SourceName = sourceNameInstance;
                                }
                                
                                JToken affectedItemsArray = propertiesValue["affectedItems"];
                                if (affectedItemsArray != null && affectedItemsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken affectedItemsValue in ((JArray)affectedItemsArray))
                                    {
                                        propertiesInstance.AffectedItems.Add(((string)affectedItemsValue));
                                    }
                                }
                                
                                JToken firstLevelContainerIdValue = propertiesValue["firstLevelContainerId"];
                                if (firstLevelContainerIdValue != null && firstLevelContainerIdValue.Type != JTokenType.Null)
                                {
                                    string firstLevelContainerIdInstance = ((string)firstLevelContainerIdValue);
                                    propertiesInstance.FirstLevelContainerId = firstLevelContainerIdInstance;
                                }
                                
                                JToken secondLevelContainerIdValue = propertiesValue["secondLevelContainerId"];
                                if (secondLevelContainerIdValue != null && secondLevelContainerIdValue.Type != JTokenType.Null)
                                {
                                    string secondLevelContainerIdInstance = ((string)secondLevelContainerIdValue);
                                    propertiesInstance.SecondLevelContainerId = secondLevelContainerIdInstance;
                                }
                                
                                JToken datasourceIdValue = propertiesValue["datasourceId"];
                                if (datasourceIdValue != null && datasourceIdValue.Type != JTokenType.Null)
                                {
                                    string datasourceIdInstance = ((string)datasourceIdValue);
                                    propertiesInstance.DatasourceId = datasourceIdInstance;
                                }
                            }
                            
                            JToken idValue = alertResponseValue["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                alertResponseInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = alertResponseValue["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                alertResponseInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = alertResponseValue["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                alertResponseInstance.Type = typeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of alerts.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional. QueryFilter for List Alert.
        /// </param>
        /// <param name='paginationParams'>
        /// Optional. Pagination parameter for skip token and top.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a AlertListResponse.
        /// </returns>
        public async Task<AlertsResponse> ListAsync(string resourceGroupName, string resourceName, CommonAlertQueryFilters queryFilter, PaginationRequest paginationParams, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("paginationParams", paginationParams);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/monitoringAlerts";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.UniqueAlertId != null)
            {
                odataFilter.Add("uniqueAlertId eq '" + Uri.EscapeDataString(queryFilter.UniqueAlertId) + "'");
            }
            if (queryFilter != null && queryFilter.StartTime != null)
            {
                odataFilter.Add("startTime eq '" + Uri.EscapeDataString(queryFilter.StartTime) + "'");
            }
            if (queryFilter != null && queryFilter.EndTime != null)
            {
                odataFilter.Add("endTime eq '" + Uri.EscapeDataString(queryFilter.EndTime) + "'");
            }
            if (queryFilter != null && queryFilter.Severity != null)
            {
                odataFilter.Add("severity eq '" + Uri.EscapeDataString(queryFilter.Severity) + "'");
            }
            if (queryFilter != null && queryFilter.Status != null)
            {
                odataFilter.Add("status eq '" + Uri.EscapeDataString(queryFilter.Status) + "'");
            }
            if (queryFilter != null && queryFilter.FirstLevelContainerId != null)
            {
                odataFilter.Add("firstLevelContainerId eq '" + Uri.EscapeDataString(queryFilter.FirstLevelContainerId) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (paginationParams != null && paginationParams.SkipToken != null)
            {
                queryParameters.Add("$skiptoken=" + Uri.EscapeDataString(paginationParams.SkipToken));
            }
            if (paginationParams != null && paginationParams.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(paginationParams.Top));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AlertsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AlertsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        JToken alertsResponseValue = responseDoc["AlertsResponse"];
                        if (alertsResponseValue != null && alertsResponseValue.Type != JTokenType.Null)
                        {
                            AlertsResponse alertsResponseInstance = new AlertsResponse();
                            
                            JToken valueArray = alertsResponseValue["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AlertResponse alertResponseInstance = new AlertResponse();
                                    alertsResponseInstance.Value.Add(alertResponseInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        AlertResponseProperties propertiesInstance = new AlertResponseProperties();
                                        alertResponseInstance.Properties = propertiesInstance;
                                        
                                        JToken alertTitleValue = propertiesValue["alertTitle"];
                                        if (alertTitleValue != null && alertTitleValue.Type != JTokenType.Null)
                                        {
                                            string alertTitleInstance = ((string)alertTitleValue);
                                            propertiesInstance.AlertTitle = alertTitleInstance;
                                        }
                                        
                                        JToken isManuallyResolvableValue = propertiesValue["isManuallyResolvable"];
                                        if (isManuallyResolvableValue != null && isManuallyResolvableValue.Type != JTokenType.Null)
                                        {
                                            bool isManuallyResolvableInstance = ((bool)isManuallyResolvableValue);
                                            propertiesInstance.IsManuallyResolvable = isManuallyResolvableInstance;
                                        }
                                        
                                        JToken initialOccurrenceTimeValue = propertiesValue["initialOccurrenceTime"];
                                        if (initialOccurrenceTimeValue != null && initialOccurrenceTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime initialOccurrenceTimeInstance = ((DateTime)initialOccurrenceTimeValue);
                                            propertiesInstance.InitialOccurrenceTime = initialOccurrenceTimeInstance;
                                        }
                                        
                                        JToken resolutionTimeValue = propertiesValue["resolutionTime"];
                                        if (resolutionTimeValue != null && resolutionTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime resolutionTimeInstance = ((DateTime)resolutionTimeValue);
                                            propertiesInstance.ResolutionTime = resolutionTimeInstance;
                                        }
                                        
                                        JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                        if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                        {
                                            AlertDetailsExtendedInfo extendedInfoInstance = new AlertDetailsExtendedInfo();
                                            propertiesInstance.ExtendedInfo = extendedInfoInstance;
                                            
                                            JToken recommendedActionsArray = extendedInfoValue["recommendedActions"];
                                            if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                                {
                                                    extendedInfoInstance.RecommendedActions.Add(((string)recommendedActionsValue));
                                                }
                                            }
                                            
                                            JToken possibleCausesArray = extendedInfoValue["possibleCauses"];
                                            if (possibleCausesArray != null && possibleCausesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken possibleCausesValue in ((JArray)possibleCausesArray))
                                                {
                                                    extendedInfoInstance.PossibleCauses.Add(((string)possibleCausesValue));
                                                }
                                            }
                                            
                                            JToken descriptionValue = extendedInfoValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                extendedInfoInstance.Description = descriptionInstance;
                                            }
                                            
                                            JToken sourceIdValue = extendedInfoValue["sourceId"];
                                            if (sourceIdValue != null && sourceIdValue.Type != JTokenType.Null)
                                            {
                                                string sourceIdInstance = ((string)sourceIdValue);
                                                extendedInfoInstance.SourceId = sourceIdInstance;
                                            }
                                            
                                            JToken jobIdValue = extendedInfoValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                extendedInfoInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken resolutionMessageValue = extendedInfoValue["resolutionMessage"];
                                            if (resolutionMessageValue != null && resolutionMessageValue.Type != JTokenType.Null)
                                            {
                                                string resolutionMessageInstance = ((string)resolutionMessageValue);
                                                extendedInfoInstance.ResolutionMessage = resolutionMessageInstance;
                                            }
                                            
                                            JToken resolutionMethodValue = extendedInfoValue["resolutionMethod"];
                                            if (resolutionMethodValue != null && resolutionMethodValue.Type != JTokenType.Null)
                                            {
                                                ResolutionMethodEnum resolutionMethodInstance = ((ResolutionMethodEnum)Enum.Parse(typeof(ResolutionMethodEnum), ((string)resolutionMethodValue), true));
                                                extendedInfoInstance.ResolutionMethod = resolutionMethodInstance;
                                            }
                                            
                                            JToken additionalInfoSequenceElement = ((JToken)extendedInfoValue["additionalInfo"]);
                                            if (additionalInfoSequenceElement != null && additionalInfoSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in additionalInfoSequenceElement)
                                                {
                                                    string additionalInfoKey = ((string)property.Name);
                                                    string additionalInfoValue = ((string)property.Value);
                                                    extendedInfoInstance.AdditionalInfo.Add(additionalInfoKey, additionalInfoValue);
                                                }
                                            }
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            AlertStatus statusInstance = ((AlertStatus)Enum.Parse(typeof(AlertStatus), ((string)statusValue), true));
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken categoryValue = propertiesValue["category"];
                                        if (categoryValue != null && categoryValue.Type != JTokenType.Null)
                                        {
                                            AlertCategory categoryInstance = ((AlertCategory)Enum.Parse(typeof(AlertCategory), ((string)categoryValue), true));
                                            propertiesInstance.Category = categoryInstance;
                                        }
                                        
                                        JToken severityValue = propertiesValue["severity"];
                                        if (severityValue != null && severityValue.Type != JTokenType.Null)
                                        {
                                            AlertSeverity severityInstance = ((AlertSeverity)Enum.Parse(typeof(AlertSeverity), ((string)severityValue), true));
                                            propertiesInstance.Severity = severityInstance;
                                        }
                                        
                                        JToken alertTypeValue = propertiesValue["alertType"];
                                        if (alertTypeValue != null && alertTypeValue.Type != JTokenType.Null)
                                        {
                                            AlertType alertTypeInstance = ((AlertType)Enum.Parse(typeof(AlertType), ((string)alertTypeValue), true));
                                            propertiesInstance.AlertType = alertTypeInstance;
                                        }
                                        
                                        JToken instanceIdValue = propertiesValue["instanceId"];
                                        if (instanceIdValue != null && instanceIdValue.Type != JTokenType.Null)
                                        {
                                            string instanceIdInstance = ((string)instanceIdValue);
                                            propertiesInstance.InstanceId = instanceIdInstance;
                                        }
                                        
                                        JToken sourceNameValue = propertiesValue["sourceName"];
                                        if (sourceNameValue != null && sourceNameValue.Type != JTokenType.Null)
                                        {
                                            string sourceNameInstance = ((string)sourceNameValue);
                                            propertiesInstance.SourceName = sourceNameInstance;
                                        }
                                        
                                        JToken affectedItemsArray = propertiesValue["affectedItems"];
                                        if (affectedItemsArray != null && affectedItemsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken affectedItemsValue in ((JArray)affectedItemsArray))
                                            {
                                                propertiesInstance.AffectedItems.Add(((string)affectedItemsValue));
                                            }
                                        }
                                        
                                        JToken firstLevelContainerIdValue = propertiesValue["firstLevelContainerId"];
                                        if (firstLevelContainerIdValue != null && firstLevelContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string firstLevelContainerIdInstance = ((string)firstLevelContainerIdValue);
                                            propertiesInstance.FirstLevelContainerId = firstLevelContainerIdInstance;
                                        }
                                        
                                        JToken secondLevelContainerIdValue = propertiesValue["secondLevelContainerId"];
                                        if (secondLevelContainerIdValue != null && secondLevelContainerIdValue.Type != JTokenType.Null)
                                        {
                                            string secondLevelContainerIdInstance = ((string)secondLevelContainerIdValue);
                                            propertiesInstance.SecondLevelContainerId = secondLevelContainerIdInstance;
                                        }
                                        
                                        JToken datasourceIdValue = propertiesValue["datasourceId"];
                                        if (datasourceIdValue != null && datasourceIdValue.Type != JTokenType.Null)
                                        {
                                            string datasourceIdInstance = ((string)datasourceIdValue);
                                            propertiesInstance.DatasourceId = datasourceIdInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        alertResponseInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        alertResponseInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        alertResponseInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = alertsResponseValue["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                alertsResponseInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resolve the specific Alert.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='uniqueAlertId'>
        /// Required. uniqueAlertId for ResolveAlert.
        /// </param>
        /// <param name='request'>
        /// Required. Resolve request to monitoringAlerts
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a AlertItemResponse.
        /// </returns>
        public async Task<AlertResponse> ResolveAsync(string resourceGroupName, string resourceName, string uniqueAlertId, ResolveAlertRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (uniqueAlertId == null)
            {
                throw new ArgumentNullException("uniqueAlertId");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("uniqueAlertId", uniqueAlertId);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ResolveAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/monitoringAlerts/";
            url = url + Uri.EscapeDataString(uniqueAlertId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject resolveAlertRequestValue = new JObject();
                requestDoc = resolveAlertRequestValue;
                
                if (request.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    resolveAlertRequestValue["properties"] = propertiesValue;
                    
                    if (request.Properties.UniqueAlertId != null)
                    {
                        propertiesValue["uniqueAlertId"] = request.Properties.UniqueAlertId;
                    }
                    
                    if (request.Properties.ResolutionMessage != null)
                    {
                        propertiesValue["resolutionMessage"] = request.Properties.ResolutionMessage;
                    }
                    
                    propertiesValue["resolutionMethod"] = request.Properties.ResolutionMethod.ToString();
                    
                    if (request.Properties.ResolutionTime != null)
                    {
                        propertiesValue["resolutionTime"] = request.Properties.ResolutionTime;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AlertResponse result = null;
                    // Deserialize Response
                    result = new AlertResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
