// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// Definition of Job operations for the Azure Backup extension.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Cancel the job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='jobName'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> CancelJobAsync(string resourceGroupName, string resourceName, string jobName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CancelJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/cancel";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-03-15");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Export job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional. QueryFilter for ExportJob.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a BaseRecoveryServicesJobResponse for Async
        /// operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> ExportJobAsync(string resourceGroupName, string resourceName, CommonJobQueryFilters queryFilter, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ExportJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobsExport";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.Status != null)
            {
                odataFilter.Add("status eq '" + Uri.EscapeDataString(queryFilter.Status) + "'");
            }
            if (queryFilter != null && queryFilter.BackupManagementType != null)
            {
                odataFilter.Add("backupManagementType eq '" + Uri.EscapeDataString(queryFilter.BackupManagementType) + "'");
            }
            if (queryFilter != null && queryFilter.Operation != null)
            {
                odataFilter.Add("operation eq '" + Uri.EscapeDataString(queryFilter.Operation) + "'");
            }
            if (queryFilter != null && queryFilter.JobId != null)
            {
                odataFilter.Add("jobId eq '" + Uri.EscapeDataString(queryFilter.JobId) + "'");
            }
            if (queryFilter != null && queryFilter.StartTime != null)
            {
                odataFilter.Add("startTime eq '" + Uri.EscapeDataString(queryFilter.StartTime) + "'");
            }
            if (queryFilter != null && queryFilter.EndTime != null)
            {
                odataFilter.Add("endTime eq '" + Uri.EscapeDataString(queryFilter.EndTime) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                httpRequest.Headers.Add("x-ms-version", "2015-03-15");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the details of specific job Objects.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='jobName'>
        /// Required. Job name  for GetOperationResult.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a ProtectedItemResponse.
        /// </returns>
        public async Task<JobResponse> GetAsync(string resourceGroupName, string resourceName, string jobName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobs/";
            url = url + Uri.EscapeDataString(jobName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobResource itemInstance = new JobResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["jobType"]);
                                if (typeName == "Job")
                                {
                                    Job jobInstance = new Job();
                                    
                                    JToken activityIdValue = propertiesValue["activityId"];
                                    if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                    {
                                        string activityIdInstance = ((string)activityIdValue);
                                        jobInstance.ActivityId = activityIdInstance;
                                    }
                                    
                                    JToken entityFriendlyNameValue = propertiesValue["entityFriendlyName"];
                                    if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                        jobInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                    }
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        jobInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken operationValue = propertiesValue["operation"];
                                    if (operationValue != null && operationValue.Type != JTokenType.Null)
                                    {
                                        string operationInstance = ((string)operationValue);
                                        jobInstance.Operation = operationInstance;
                                    }
                                    
                                    JToken statusValue = propertiesValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        jobInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = propertiesValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        jobInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = propertiesValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        jobInstance.EndTime = endTimeInstance;
                                    }
                                    itemInstance.Properties = jobInstance;
                                }
                                if (typeName == "AzureIaaSVMJob")
                                {
                                    AzureIaaSVMJob azureIaaSVMJobInstance = new AzureIaaSVMJob();
                                    
                                    JToken durationValue = propertiesValue["duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                        azureIaaSVMJobInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken actionsInfoArray = propertiesValue["actionsInfo"];
                                    if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                        {
                                            azureIaaSVMJobInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                        }
                                    }
                                    
                                    JToken errorDetailsArray = propertiesValue["errorDetails"];
                                    if (errorDetailsArray != null && errorDetailsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken errorDetailsValue in ((JArray)errorDetailsArray))
                                        {
                                            AzureIaaSVMErrorInfo azureIaaSVMErrorInfoInstance = new AzureIaaSVMErrorInfo();
                                            azureIaaSVMJobInstance.ErrorDetails.Add(azureIaaSVMErrorInfoInstance);
                                            
                                            JToken errorCodeValue = errorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                int errorCodeInstance = ((int)errorCodeValue);
                                                azureIaaSVMErrorInfoInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorTitleValue = errorDetailsValue["errorTitle"];
                                            if (errorTitleValue != null && errorTitleValue.Type != JTokenType.Null)
                                            {
                                                string errorTitleInstance = ((string)errorTitleValue);
                                                azureIaaSVMErrorInfoInstance.ErrorTitle = errorTitleInstance;
                                            }
                                            
                                            JToken errorStringValue = errorDetailsValue["errorString"];
                                            if (errorStringValue != null && errorStringValue.Type != JTokenType.Null)
                                            {
                                                string errorStringInstance = ((string)errorStringValue);
                                                azureIaaSVMErrorInfoInstance.ErrorString = errorStringInstance;
                                            }
                                            
                                            JToken recommendationsArray = errorDetailsValue["recommendations"];
                                            if (recommendationsArray != null && recommendationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken recommendationsValue in ((JArray)recommendationsArray))
                                                {
                                                    azureIaaSVMErrorInfoInstance.Recommendations.Add(((string)recommendationsValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                        azureIaaSVMJobInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                    }
                                    
                                    JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMJobExtendedInfo extendedInfoInstance = new AzureIaaSVMJobExtendedInfo();
                                        azureIaaSVMJobInstance.ExtendedInfo = extendedInfoInstance;
                                        
                                        JToken tasksListArray = extendedInfoValue["tasksList"];
                                        if (tasksListArray != null && tasksListArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken tasksListValue in ((JArray)tasksListArray))
                                            {
                                                AzureIaaSVMJobTaskDetails azureIaaSVMJobTaskDetailsInstance = new AzureIaaSVMJobTaskDetails();
                                                extendedInfoInstance.TasksList.Add(azureIaaSVMJobTaskDetailsInstance);
                                                
                                                JToken taskIdValue = tasksListValue["taskId"];
                                                if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                                {
                                                    string taskIdInstance = ((string)taskIdValue);
                                                    azureIaaSVMJobTaskDetailsInstance.TaskId = taskIdInstance;
                                                }
                                                
                                                JToken startTimeValue2 = tasksListValue["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = tasksListValue["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken durationValue2 = tasksListValue["duration"];
                                                if (durationValue2 != null && durationValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance2 = TimeSpan.Parse(((string)durationValue2), CultureInfo.InvariantCulture);
                                                    azureIaaSVMJobTaskDetailsInstance.Duration = durationInstance2;
                                                }
                                                
                                                JToken statusValue2 = tasksListValue["status"];
                                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                {
                                                    string statusInstance2 = ((string)statusValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.Status = statusInstance2;
                                                }
                                                
                                                JToken progressPercentageValue = tasksListValue["progressPercentage"];
                                                if (progressPercentageValue != null && progressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    double progressPercentageInstance = ((double)progressPercentageValue);
                                                    azureIaaSVMJobTaskDetailsInstance.ProgressPercentage = progressPercentageInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken propertyBagSequenceElement = ((JToken)extendedInfoValue["propertyBag"]);
                                        if (propertyBagSequenceElement != null && propertyBagSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in propertyBagSequenceElement)
                                            {
                                                string propertyBagKey = ((string)property.Name);
                                                string propertyBagValue = ((string)property.Value);
                                                extendedInfoInstance.PropertyBag.Add(propertyBagKey, propertyBagValue);
                                            }
                                        }
                                        
                                        JToken progressPercentageValue2 = extendedInfoValue["progressPercentage"];
                                        if (progressPercentageValue2 != null && progressPercentageValue2.Type != JTokenType.Null)
                                        {
                                            double progressPercentageInstance2 = ((double)progressPercentageValue2);
                                            extendedInfoInstance.ProgressPercentage = progressPercentageInstance2;
                                        }
                                        
                                        JToken dynamicErrorMessageValue = extendedInfoValue["dynamicErrorMessage"];
                                        if (dynamicErrorMessageValue != null && dynamicErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string dynamicErrorMessageInstance = ((string)dynamicErrorMessageValue);
                                            extendedInfoInstance.DynamicErrorMessage = dynamicErrorMessageInstance;
                                        }
                                    }
                                    
                                    JToken activityIdValue2 = propertiesValue["activityId"];
                                    if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                    {
                                        string activityIdInstance2 = ((string)activityIdValue2);
                                        azureIaaSVMJobInstance.ActivityId = activityIdInstance2;
                                    }
                                    
                                    JToken entityFriendlyNameValue2 = propertiesValue["entityFriendlyName"];
                                    if (entityFriendlyNameValue2 != null && entityFriendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string entityFriendlyNameInstance2 = ((string)entityFriendlyNameValue2);
                                        azureIaaSVMJobInstance.EntityFriendlyName = entityFriendlyNameInstance2;
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMJobInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken operationValue2 = propertiesValue["operation"];
                                    if (operationValue2 != null && operationValue2.Type != JTokenType.Null)
                                    {
                                        string operationInstance2 = ((string)operationValue2);
                                        azureIaaSVMJobInstance.Operation = operationInstance2;
                                    }
                                    
                                    JToken statusValue3 = propertiesValue["status"];
                                    if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                    {
                                        string statusInstance3 = ((string)statusValue3);
                                        azureIaaSVMJobInstance.Status = statusInstance3;
                                    }
                                    
                                    JToken startTimeValue3 = propertiesValue["startTime"];
                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance3 = ((DateTime)startTimeValue3);
                                        azureIaaSVMJobInstance.StartTime = startTimeInstance3;
                                    }
                                    
                                    JToken endTimeValue3 = propertiesValue["endTime"];
                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance3 = ((DateTime)endTimeValue3);
                                        azureIaaSVMJobInstance.EndTime = endTimeInstance3;
                                    }
                                    itemInstance.Properties = azureIaaSVMJobInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the operation result of specific job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='operationId'>
        /// Required. OperationId for GetOperationResult.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a GetOperationResultResponse.
        /// </returns>
        public async Task<GetOperationResultResponse> GetExportJobOperationResultAsync(string resourceGroupName, string resourceName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetExportJobOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobs/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken operationValue = responseDoc["operation"];
                            if (operationValue != null && operationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)operationValue["objectType"]);
                                if (typeName == "OperationResultInfo")
                                {
                                    OperationResultInfo operationResultInfoInstance = new OperationResultInfo();
                                    
                                    JToken jobListArray = operationValue["jobList"];
                                    if (jobListArray != null && jobListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken jobListValue in ((JArray)jobListArray))
                                        {
                                            operationResultInfoInstance.JobList.Add(((string)jobListValue));
                                        }
                                    }
                                    result.Operation = operationResultInfoInstance;
                                }
                                if (typeName == "ExportJobsOperationResultInfo")
                                {
                                    ExportJobsOperationResultInfo exportJobsOperationResultInfoInstance = new ExportJobsOperationResultInfo();
                                    
                                    JToken blobUrlValue = operationValue["blobUrl"];
                                    if (blobUrlValue != null && blobUrlValue.Type != JTokenType.Null)
                                    {
                                        string blobUrlInstance = ((string)blobUrlValue);
                                        exportJobsOperationResultInfoInstance.BlobUrl = blobUrlInstance;
                                    }
                                    
                                    JToken blobSasKeyValue = operationValue["blobSasKey"];
                                    if (blobSasKeyValue != null && blobSasKeyValue.Type != JTokenType.Null)
                                    {
                                        string blobSasKeyInstance = ((string)blobSasKeyValue);
                                        exportJobsOperationResultInfoInstance.BlobSasKey = blobSasKeyInstance;
                                    }
                                    result.Operation = exportJobsOperationResultInfoInstance;
                                }
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the operation result of specific job.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='jobName'>
        /// Required. Job name  for GetOperationResult.
        /// </param>
        /// <param name='operationId'>
        /// Required. OperationId for GetOperationResult.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a ProtectedItemResponse.
        /// </returns>
        public async Task<JobResponse> GetOperationResultAsync(string resourceGroupName, string resourceName, string jobName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (jobName == null)
            {
                throw new ArgumentNullException("jobName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("jobName", jobName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobs/";
            url = url + Uri.EscapeDataString(jobName);
            url = url + "/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobResource itemInstance = new JobResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["jobType"]);
                                if (typeName == "Job")
                                {
                                    Job jobInstance = new Job();
                                    
                                    JToken activityIdValue = propertiesValue["activityId"];
                                    if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                    {
                                        string activityIdInstance = ((string)activityIdValue);
                                        jobInstance.ActivityId = activityIdInstance;
                                    }
                                    
                                    JToken entityFriendlyNameValue = propertiesValue["entityFriendlyName"];
                                    if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                        jobInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                    }
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        jobInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken operationValue = propertiesValue["operation"];
                                    if (operationValue != null && operationValue.Type != JTokenType.Null)
                                    {
                                        string operationInstance = ((string)operationValue);
                                        jobInstance.Operation = operationInstance;
                                    }
                                    
                                    JToken statusValue = propertiesValue["status"];
                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                    {
                                        string statusInstance = ((string)statusValue);
                                        jobInstance.Status = statusInstance;
                                    }
                                    
                                    JToken startTimeValue = propertiesValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        jobInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = propertiesValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        jobInstance.EndTime = endTimeInstance;
                                    }
                                    itemInstance.Properties = jobInstance;
                                }
                                if (typeName == "AzureIaaSVMJob")
                                {
                                    AzureIaaSVMJob azureIaaSVMJobInstance = new AzureIaaSVMJob();
                                    
                                    JToken durationValue = propertiesValue["duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                        azureIaaSVMJobInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken actionsInfoArray = propertiesValue["actionsInfo"];
                                    if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                        {
                                            azureIaaSVMJobInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                        }
                                    }
                                    
                                    JToken errorDetailsArray = propertiesValue["errorDetails"];
                                    if (errorDetailsArray != null && errorDetailsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken errorDetailsValue in ((JArray)errorDetailsArray))
                                        {
                                            AzureIaaSVMErrorInfo azureIaaSVMErrorInfoInstance = new AzureIaaSVMErrorInfo();
                                            azureIaaSVMJobInstance.ErrorDetails.Add(azureIaaSVMErrorInfoInstance);
                                            
                                            JToken errorCodeValue = errorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                int errorCodeInstance = ((int)errorCodeValue);
                                                azureIaaSVMErrorInfoInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken errorTitleValue = errorDetailsValue["errorTitle"];
                                            if (errorTitleValue != null && errorTitleValue.Type != JTokenType.Null)
                                            {
                                                string errorTitleInstance = ((string)errorTitleValue);
                                                azureIaaSVMErrorInfoInstance.ErrorTitle = errorTitleInstance;
                                            }
                                            
                                            JToken errorStringValue = errorDetailsValue["errorString"];
                                            if (errorStringValue != null && errorStringValue.Type != JTokenType.Null)
                                            {
                                                string errorStringInstance = ((string)errorStringValue);
                                                azureIaaSVMErrorInfoInstance.ErrorString = errorStringInstance;
                                            }
                                            
                                            JToken recommendationsArray = errorDetailsValue["recommendations"];
                                            if (recommendationsArray != null && recommendationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken recommendationsValue in ((JArray)recommendationsArray))
                                                {
                                                    azureIaaSVMErrorInfoInstance.Recommendations.Add(((string)recommendationsValue));
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                    if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                        azureIaaSVMJobInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                    }
                                    
                                    JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMJobExtendedInfo extendedInfoInstance = new AzureIaaSVMJobExtendedInfo();
                                        azureIaaSVMJobInstance.ExtendedInfo = extendedInfoInstance;
                                        
                                        JToken tasksListArray = extendedInfoValue["tasksList"];
                                        if (tasksListArray != null && tasksListArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken tasksListValue in ((JArray)tasksListArray))
                                            {
                                                AzureIaaSVMJobTaskDetails azureIaaSVMJobTaskDetailsInstance = new AzureIaaSVMJobTaskDetails();
                                                extendedInfoInstance.TasksList.Add(azureIaaSVMJobTaskDetailsInstance);
                                                
                                                JToken taskIdValue = tasksListValue["taskId"];
                                                if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                                {
                                                    string taskIdInstance = ((string)taskIdValue);
                                                    azureIaaSVMJobTaskDetailsInstance.TaskId = taskIdInstance;
                                                }
                                                
                                                JToken startTimeValue2 = tasksListValue["startTime"];
                                                if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.StartTime = startTimeInstance2;
                                                }
                                                
                                                JToken endTimeValue2 = tasksListValue["endTime"];
                                                if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.EndTime = endTimeInstance2;
                                                }
                                                
                                                JToken durationValue2 = tasksListValue["duration"];
                                                if (durationValue2 != null && durationValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan durationInstance2 = TimeSpan.Parse(((string)durationValue2), CultureInfo.InvariantCulture);
                                                    azureIaaSVMJobTaskDetailsInstance.Duration = durationInstance2;
                                                }
                                                
                                                JToken statusValue2 = tasksListValue["status"];
                                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                {
                                                    string statusInstance2 = ((string)statusValue2);
                                                    azureIaaSVMJobTaskDetailsInstance.Status = statusInstance2;
                                                }
                                                
                                                JToken progressPercentageValue = tasksListValue["progressPercentage"];
                                                if (progressPercentageValue != null && progressPercentageValue.Type != JTokenType.Null)
                                                {
                                                    double progressPercentageInstance = ((double)progressPercentageValue);
                                                    azureIaaSVMJobTaskDetailsInstance.ProgressPercentage = progressPercentageInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken propertyBagSequenceElement = ((JToken)extendedInfoValue["propertyBag"]);
                                        if (propertyBagSequenceElement != null && propertyBagSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in propertyBagSequenceElement)
                                            {
                                                string propertyBagKey = ((string)property.Name);
                                                string propertyBagValue = ((string)property.Value);
                                                extendedInfoInstance.PropertyBag.Add(propertyBagKey, propertyBagValue);
                                            }
                                        }
                                        
                                        JToken progressPercentageValue2 = extendedInfoValue["progressPercentage"];
                                        if (progressPercentageValue2 != null && progressPercentageValue2.Type != JTokenType.Null)
                                        {
                                            double progressPercentageInstance2 = ((double)progressPercentageValue2);
                                            extendedInfoInstance.ProgressPercentage = progressPercentageInstance2;
                                        }
                                        
                                        JToken dynamicErrorMessageValue = extendedInfoValue["dynamicErrorMessage"];
                                        if (dynamicErrorMessageValue != null && dynamicErrorMessageValue.Type != JTokenType.Null)
                                        {
                                            string dynamicErrorMessageInstance = ((string)dynamicErrorMessageValue);
                                            extendedInfoInstance.DynamicErrorMessage = dynamicErrorMessageInstance;
                                        }
                                    }
                                    
                                    JToken activityIdValue2 = propertiesValue["activityId"];
                                    if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                    {
                                        string activityIdInstance2 = ((string)activityIdValue2);
                                        azureIaaSVMJobInstance.ActivityId = activityIdInstance2;
                                    }
                                    
                                    JToken entityFriendlyNameValue2 = propertiesValue["entityFriendlyName"];
                                    if (entityFriendlyNameValue2 != null && entityFriendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string entityFriendlyNameInstance2 = ((string)entityFriendlyNameValue2);
                                        azureIaaSVMJobInstance.EntityFriendlyName = entityFriendlyNameInstance2;
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMJobInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken operationValue2 = propertiesValue["operation"];
                                    if (operationValue2 != null && operationValue2.Type != JTokenType.Null)
                                    {
                                        string operationInstance2 = ((string)operationValue2);
                                        azureIaaSVMJobInstance.Operation = operationInstance2;
                                    }
                                    
                                    JToken statusValue3 = propertiesValue["status"];
                                    if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                    {
                                        string statusInstance3 = ((string)statusValue3);
                                        azureIaaSVMJobInstance.Status = statusInstance3;
                                    }
                                    
                                    JToken startTimeValue3 = propertiesValue["startTime"];
                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance3 = ((DateTime)startTimeValue3);
                                        azureIaaSVMJobInstance.StartTime = startTimeInstance3;
                                    }
                                    
                                    JToken endTimeValue3 = propertiesValue["endTime"];
                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance3 = ((DateTime)endTimeValue3);
                                        azureIaaSVMJobInstance.EndTime = endTimeInstance3;
                                    }
                                    itemInstance.Properties = azureIaaSVMJobInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list  of jobs.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional. QueryFilter for List job.
        /// </param>
        /// <param name='paginationParams'>
        /// Optional. Pagination parameter for skip token and top.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a JobListResponse.
        /// </returns>
        public async Task<JobListResponse> ListAsync(string resourceGroupName, string resourceName, CommonJobQueryFilters queryFilter, PaginationRequest paginationParams, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("paginationParams", paginationParams);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupJobs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-15");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.Status != null)
            {
                odataFilter.Add("status eq '" + Uri.EscapeDataString(queryFilter.Status) + "'");
            }
            if (queryFilter != null && queryFilter.BackupManagementType != null)
            {
                odataFilter.Add("backupManagementType eq '" + Uri.EscapeDataString(queryFilter.BackupManagementType) + "'");
            }
            if (queryFilter != null && queryFilter.Operation != null)
            {
                odataFilter.Add("operation eq '" + Uri.EscapeDataString(queryFilter.Operation) + "'");
            }
            if (queryFilter != null && queryFilter.JobId != null)
            {
                odataFilter.Add("jobId eq '" + Uri.EscapeDataString(queryFilter.JobId) + "'");
            }
            if (queryFilter != null && queryFilter.StartTime != null)
            {
                odataFilter.Add("startTime eq '" + Uri.EscapeDataString(queryFilter.StartTime) + "'");
            }
            if (queryFilter != null && queryFilter.EndTime != null)
            {
                odataFilter.Add("endTime eq '" + Uri.EscapeDataString(queryFilter.EndTime) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (paginationParams != null && paginationParams.SkipToken != null)
            {
                queryParameters.Add("$skiptoken=" + Uri.EscapeDataString(paginationParams.SkipToken));
            }
            if (paginationParams != null && paginationParams.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(paginationParams.Top));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobResourceList itemListInstance = new JobResourceList();
                            result.ItemList = itemListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    JobResource jobResourceInstance = new JobResource();
                                    itemListInstance.Value.Add(jobResourceInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["jobType"]);
                                        if (typeName == "Job")
                                        {
                                            Job jobInstance = new Job();
                                            
                                            JToken activityIdValue = propertiesValue["activityId"];
                                            if (activityIdValue != null && activityIdValue.Type != JTokenType.Null)
                                            {
                                                string activityIdInstance = ((string)activityIdValue);
                                                jobInstance.ActivityId = activityIdInstance;
                                            }
                                            
                                            JToken entityFriendlyNameValue = propertiesValue["entityFriendlyName"];
                                            if (entityFriendlyNameValue != null && entityFriendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string entityFriendlyNameInstance = ((string)entityFriendlyNameValue);
                                                jobInstance.EntityFriendlyName = entityFriendlyNameInstance;
                                            }
                                            
                                            JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                                jobInstance.BackupManagementType = backupManagementTypeInstance;
                                            }
                                            
                                            JToken operationValue = propertiesValue["operation"];
                                            if (operationValue != null && operationValue.Type != JTokenType.Null)
                                            {
                                                string operationInstance = ((string)operationValue);
                                                jobInstance.Operation = operationInstance;
                                            }
                                            
                                            JToken statusValue = propertiesValue["status"];
                                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                                            {
                                                string statusInstance = ((string)statusValue);
                                                jobInstance.Status = statusInstance;
                                            }
                                            
                                            JToken startTimeValue = propertiesValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                jobInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken endTimeValue = propertiesValue["endTime"];
                                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime endTimeInstance = ((DateTime)endTimeValue);
                                                jobInstance.EndTime = endTimeInstance;
                                            }
                                            jobResourceInstance.Properties = jobInstance;
                                        }
                                        if (typeName == "AzureIaaSVMJob")
                                        {
                                            AzureIaaSVMJob azureIaaSVMJobInstance = new AzureIaaSVMJob();
                                            
                                            JToken durationValue = propertiesValue["duration"];
                                            if (durationValue != null && durationValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan durationInstance = TimeSpan.Parse(((string)durationValue), CultureInfo.InvariantCulture);
                                                azureIaaSVMJobInstance.Duration = durationInstance;
                                            }
                                            
                                            JToken actionsInfoArray = propertiesValue["actionsInfo"];
                                            if (actionsInfoArray != null && actionsInfoArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken actionsInfoValue in ((JArray)actionsInfoArray))
                                                {
                                                    azureIaaSVMJobInstance.ActionsInfo.Add(((JobSupportedAction)Enum.Parse(typeof(JobSupportedAction), ((string)actionsInfoValue), true)));
                                                }
                                            }
                                            
                                            JToken errorDetailsArray = propertiesValue["errorDetails"];
                                            if (errorDetailsArray != null && errorDetailsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken errorDetailsValue in ((JArray)errorDetailsArray))
                                                {
                                                    AzureIaaSVMErrorInfo azureIaaSVMErrorInfoInstance = new AzureIaaSVMErrorInfo();
                                                    azureIaaSVMJobInstance.ErrorDetails.Add(azureIaaSVMErrorInfoInstance);
                                                    
                                                    JToken errorCodeValue = errorDetailsValue["errorCode"];
                                                    if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                    {
                                                        int errorCodeInstance = ((int)errorCodeValue);
                                                        azureIaaSVMErrorInfoInstance.ErrorCode = errorCodeInstance;
                                                    }
                                                    
                                                    JToken errorTitleValue = errorDetailsValue["errorTitle"];
                                                    if (errorTitleValue != null && errorTitleValue.Type != JTokenType.Null)
                                                    {
                                                        string errorTitleInstance = ((string)errorTitleValue);
                                                        azureIaaSVMErrorInfoInstance.ErrorTitle = errorTitleInstance;
                                                    }
                                                    
                                                    JToken errorStringValue = errorDetailsValue["errorString"];
                                                    if (errorStringValue != null && errorStringValue.Type != JTokenType.Null)
                                                    {
                                                        string errorStringInstance = ((string)errorStringValue);
                                                        azureIaaSVMErrorInfoInstance.ErrorString = errorStringInstance;
                                                    }
                                                    
                                                    JToken recommendationsArray = errorDetailsValue["recommendations"];
                                                    if (recommendationsArray != null && recommendationsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken recommendationsValue in ((JArray)recommendationsArray))
                                                        {
                                                            azureIaaSVMErrorInfoInstance.Recommendations.Add(((string)recommendationsValue));
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken virtualMachineVersionValue = propertiesValue["virtualMachineVersion"];
                                            if (virtualMachineVersionValue != null && virtualMachineVersionValue.Type != JTokenType.Null)
                                            {
                                                string virtualMachineVersionInstance = ((string)virtualMachineVersionValue);
                                                azureIaaSVMJobInstance.VirtualMachineVersion = virtualMachineVersionInstance;
                                            }
                                            
                                            JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                            {
                                                AzureIaaSVMJobExtendedInfo extendedInfoInstance = new AzureIaaSVMJobExtendedInfo();
                                                azureIaaSVMJobInstance.ExtendedInfo = extendedInfoInstance;
                                                
                                                JToken tasksListArray = extendedInfoValue["tasksList"];
                                                if (tasksListArray != null && tasksListArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken tasksListValue in ((JArray)tasksListArray))
                                                    {
                                                        AzureIaaSVMJobTaskDetails azureIaaSVMJobTaskDetailsInstance = new AzureIaaSVMJobTaskDetails();
                                                        extendedInfoInstance.TasksList.Add(azureIaaSVMJobTaskDetailsInstance);
                                                        
                                                        JToken taskIdValue = tasksListValue["taskId"];
                                                        if (taskIdValue != null && taskIdValue.Type != JTokenType.Null)
                                                        {
                                                            string taskIdInstance = ((string)taskIdValue);
                                                            azureIaaSVMJobTaskDetailsInstance.TaskId = taskIdInstance;
                                                        }
                                                        
                                                        JToken startTimeValue2 = tasksListValue["startTime"];
                                                        if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime startTimeInstance2 = ((DateTime)startTimeValue2);
                                                            azureIaaSVMJobTaskDetailsInstance.StartTime = startTimeInstance2;
                                                        }
                                                        
                                                        JToken endTimeValue2 = tasksListValue["endTime"];
                                                        if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime endTimeInstance2 = ((DateTime)endTimeValue2);
                                                            azureIaaSVMJobTaskDetailsInstance.EndTime = endTimeInstance2;
                                                        }
                                                        
                                                        JToken durationValue2 = tasksListValue["duration"];
                                                        if (durationValue2 != null && durationValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan durationInstance2 = TimeSpan.Parse(((string)durationValue2), CultureInfo.InvariantCulture);
                                                            azureIaaSVMJobTaskDetailsInstance.Duration = durationInstance2;
                                                        }
                                                        
                                                        JToken statusValue2 = tasksListValue["status"];
                                                        if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                        {
                                                            string statusInstance2 = ((string)statusValue2);
                                                            azureIaaSVMJobTaskDetailsInstance.Status = statusInstance2;
                                                        }
                                                        
                                                        JToken progressPercentageValue = tasksListValue["progressPercentage"];
                                                        if (progressPercentageValue != null && progressPercentageValue.Type != JTokenType.Null)
                                                        {
                                                            double progressPercentageInstance = ((double)progressPercentageValue);
                                                            azureIaaSVMJobTaskDetailsInstance.ProgressPercentage = progressPercentageInstance;
                                                        }
                                                    }
                                                }
                                                
                                                JToken propertyBagSequenceElement = ((JToken)extendedInfoValue["propertyBag"]);
                                                if (propertyBagSequenceElement != null && propertyBagSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in propertyBagSequenceElement)
                                                    {
                                                        string propertyBagKey = ((string)property.Name);
                                                        string propertyBagValue = ((string)property.Value);
                                                        extendedInfoInstance.PropertyBag.Add(propertyBagKey, propertyBagValue);
                                                    }
                                                }
                                                
                                                JToken progressPercentageValue2 = extendedInfoValue["progressPercentage"];
                                                if (progressPercentageValue2 != null && progressPercentageValue2.Type != JTokenType.Null)
                                                {
                                                    double progressPercentageInstance2 = ((double)progressPercentageValue2);
                                                    extendedInfoInstance.ProgressPercentage = progressPercentageInstance2;
                                                }
                                                
                                                JToken dynamicErrorMessageValue = extendedInfoValue["dynamicErrorMessage"];
                                                if (dynamicErrorMessageValue != null && dynamicErrorMessageValue.Type != JTokenType.Null)
                                                {
                                                    string dynamicErrorMessageInstance = ((string)dynamicErrorMessageValue);
                                                    extendedInfoInstance.DynamicErrorMessage = dynamicErrorMessageInstance;
                                                }
                                            }
                                            
                                            JToken activityIdValue2 = propertiesValue["activityId"];
                                            if (activityIdValue2 != null && activityIdValue2.Type != JTokenType.Null)
                                            {
                                                string activityIdInstance2 = ((string)activityIdValue2);
                                                azureIaaSVMJobInstance.ActivityId = activityIdInstance2;
                                            }
                                            
                                            JToken entityFriendlyNameValue2 = propertiesValue["entityFriendlyName"];
                                            if (entityFriendlyNameValue2 != null && entityFriendlyNameValue2.Type != JTokenType.Null)
                                            {
                                                string entityFriendlyNameInstance2 = ((string)entityFriendlyNameValue2);
                                                azureIaaSVMJobInstance.EntityFriendlyName = entityFriendlyNameInstance2;
                                            }
                                            
                                            JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                                azureIaaSVMJobInstance.BackupManagementType = backupManagementTypeInstance2;
                                            }
                                            
                                            JToken operationValue2 = propertiesValue["operation"];
                                            if (operationValue2 != null && operationValue2.Type != JTokenType.Null)
                                            {
                                                string operationInstance2 = ((string)operationValue2);
                                                azureIaaSVMJobInstance.Operation = operationInstance2;
                                            }
                                            
                                            JToken statusValue3 = propertiesValue["status"];
                                            if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                            {
                                                string statusInstance3 = ((string)statusValue3);
                                                azureIaaSVMJobInstance.Status = statusInstance3;
                                            }
                                            
                                            JToken startTimeValue3 = propertiesValue["startTime"];
                                            if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                            {
                                                DateTime startTimeInstance3 = ((DateTime)startTimeValue3);
                                                azureIaaSVMJobInstance.StartTime = startTimeInstance3;
                                            }
                                            
                                            JToken endTimeValue3 = propertiesValue["endTime"];
                                            if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                            {
                                                DateTime endTimeInstance3 = ((DateTime)endTimeValue3);
                                                azureIaaSVMJobInstance.EndTime = endTimeInstance3;
                                            }
                                            jobResourceInstance.Properties = azureIaaSVMJobInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        jobResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        jobResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        jobResourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        jobResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            jobResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        jobResourceInstance.ETag = eTagInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                itemListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
