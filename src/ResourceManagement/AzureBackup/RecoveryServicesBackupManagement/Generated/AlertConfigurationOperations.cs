// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// Definition of AlertConfiguration operations for the Azure Backup
    /// extension.
    /// </summary>
    internal partial class AlertConfigurationOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IAlertConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the AlertConfigurationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AlertConfigurationOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Get Alert notification configuration.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a NotificationConfigurationResponse.
        /// </returns>
        public async Task<NotificationConfigurationResponse> GetAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/monitoringConfigurations/notificationConfigurationapi-version=";
            url = url + "2015-03-15";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NotificationConfigurationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NotificationConfigurationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        JToken notificationConfigurationResponseValue = responseDoc["NotificationConfigurationResponse"];
                        if (notificationConfigurationResponseValue != null && notificationConfigurationResponseValue.Type != JTokenType.Null)
                        {
                            NotificationConfigurationResponse notificationConfigurationResponseInstance = new NotificationConfigurationResponse();
                            
                            JToken propertiesValue = notificationConfigurationResponseValue["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                NotificationConfiguration propertiesInstance = new NotificationConfiguration();
                                notificationConfigurationResponseInstance.Properties = propertiesInstance;
                                
                                JToken areNotificationsEnabledValue = propertiesValue["areNotificationsEnabled"];
                                if (areNotificationsEnabledValue != null && areNotificationsEnabledValue.Type != JTokenType.Null)
                                {
                                    bool areNotificationsEnabledInstance = ((bool)areNotificationsEnabledValue);
                                    propertiesInstance.AreNotificationsEnabled = areNotificationsEnabledInstance;
                                }
                                
                                JToken frequencyDetailsValue = propertiesValue["frequencyDetails"];
                                if (frequencyDetailsValue != null && frequencyDetailsValue.Type != JTokenType.Null)
                                {
                                    NotificationFrequencyDetails frequencyDetailsInstance = new NotificationFrequencyDetails();
                                    propertiesInstance.FrequencyDetails = frequencyDetailsInstance;
                                    
                                    JToken frequencyTypeValue = frequencyDetailsValue["frequencyType"];
                                    if (frequencyTypeValue != null && frequencyTypeValue.Type != JTokenType.Null)
                                    {
                                        NotificationFrequencyType frequencyTypeInstance = ((NotificationFrequencyType)Enum.Parse(typeof(NotificationFrequencyType), ((string)frequencyTypeValue), true));
                                        frequencyDetailsInstance.FrequencyType = frequencyTypeInstance;
                                    }
                                    
                                    JToken frequencyValueValue = frequencyDetailsValue["frequencyValue"];
                                    if (frequencyValueValue != null && frequencyValueValue.Type != JTokenType.Null)
                                    {
                                        long frequencyValueInstance = ((long)frequencyValueValue);
                                        frequencyDetailsInstance.FrequencyValue = frequencyValueInstance;
                                    }
                                }
                                
                                JToken sourcesToNotifyForArray = propertiesValue["sourcesToNotifyFor"];
                                if (sourcesToNotifyForArray != null && sourcesToNotifyForArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken sourcesToNotifyForValue in ((JArray)sourcesToNotifyForArray))
                                    {
                                        propertiesInstance.SourcesToNotifyFor.Add(((AlertSource)Enum.Parse(typeof(AlertSource), ((string)sourcesToNotifyForValue), true)));
                                    }
                                }
                                
                                JToken severitiesToNotifyForArray = propertiesValue["severitiesToNotifyFor"];
                                if (severitiesToNotifyForArray != null && severitiesToNotifyForArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken severitiesToNotifyForValue in ((JArray)severitiesToNotifyForArray))
                                    {
                                        propertiesInstance.SeveritiesToNotifyFor.Add(((AlertSeverity)Enum.Parse(typeof(AlertSeverity), ((string)severitiesToNotifyForValue), true)));
                                    }
                                }
                                
                                JToken typesToNotifyForArray = propertiesValue["typesToNotifyFor"];
                                if (typesToNotifyForArray != null && typesToNotifyForArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken typesToNotifyForValue in ((JArray)typesToNotifyForArray))
                                    {
                                        propertiesInstance.TypesToNotifyFor.Add(((AlertType)Enum.Parse(typeof(AlertType), ((string)typesToNotifyForValue), true)));
                                    }
                                }
                                
                                JToken shouldNotifyAdminsValue = propertiesValue["shouldNotifyAdmins"];
                                if (shouldNotifyAdminsValue != null && shouldNotifyAdminsValue.Type != JTokenType.Null)
                                {
                                    bool shouldNotifyAdminsInstance = ((bool)shouldNotifyAdminsValue);
                                    propertiesInstance.ShouldNotifyAdmins = shouldNotifyAdminsInstance;
                                }
                                
                                JToken shouldNotifyCoAdminsValue = propertiesValue["shouldNotifyCoAdmins"];
                                if (shouldNotifyCoAdminsValue != null && shouldNotifyCoAdminsValue.Type != JTokenType.Null)
                                {
                                    bool shouldNotifyCoAdminsInstance = ((bool)shouldNotifyCoAdminsValue);
                                    propertiesInstance.ShouldNotifyCoAdmins = shouldNotifyCoAdminsInstance;
                                }
                                
                                JToken additionalRecipientsArray = propertiesValue["additionalRecipients"];
                                if (additionalRecipientsArray != null && additionalRecipientsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken additionalRecipientsValue in ((JArray)additionalRecipientsArray))
                                    {
                                        propertiesInstance.AdditionalRecipients.Add(((string)additionalRecipientsValue));
                                    }
                                }
                            }
                            
                            JToken idValue = notificationConfigurationResponseValue["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                notificationConfigurationResponseInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = notificationConfigurationResponseValue["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                notificationConfigurationResponseInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = notificationConfigurationResponseValue["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                notificationConfigurationResponseInstance.Type = typeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resolve the specific Alert.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. ResourceGroupName for recoveryServices Vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. ResourceName for recoveryServices Vault.
        /// </param>
        /// <param name='request'>
        /// Required. Update request for notificationConfiguration
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The definition of a NotificationConfigurationResponse.
        /// </returns>
        public async Task<NotificationConfigurationResponse> UpdateAsync(string resourceGroupName, string resourceName, ConfigureNotificationRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/monitoringConfigurations/notificationConfigurationapi-version=";
            url = url + "2015-03-15";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", "en-us");
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject configureNotificationRequestValue = new JObject();
                requestDoc = configureNotificationRequestValue;
                
                if (request.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    configureNotificationRequestValue["properties"] = propertiesValue;
                    
                    propertiesValue["areNotificationsEnabled"] = request.Properties.AreNotificationsEnabled;
                    
                    if (request.Properties.FrequencyDetails != null)
                    {
                        JObject frequencyDetailsValue = new JObject();
                        propertiesValue["frequencyDetails"] = frequencyDetailsValue;
                        
                        frequencyDetailsValue["frequencyType"] = request.Properties.FrequencyDetails.FrequencyType.ToString();
                        
                        frequencyDetailsValue["frequencyValue"] = request.Properties.FrequencyDetails.FrequencyValue;
                    }
                    
                    if (request.Properties.SourcesToNotifyFor != null)
                    {
                        JArray sourcesToNotifyForArray = new JArray();
                        foreach (AlertSource sourcesToNotifyForItem in request.Properties.SourcesToNotifyFor)
                        {
                            sourcesToNotifyForArray.Add(sourcesToNotifyForItem.ToString());
                        }
                        propertiesValue["sourcesToNotifyFor"] = sourcesToNotifyForArray;
                    }
                    
                    if (request.Properties.SeveritiesToNotifyFor != null)
                    {
                        JArray severitiesToNotifyForArray = new JArray();
                        foreach (AlertSeverity severitiesToNotifyForItem in request.Properties.SeveritiesToNotifyFor)
                        {
                            severitiesToNotifyForArray.Add(severitiesToNotifyForItem.ToString());
                        }
                        propertiesValue["severitiesToNotifyFor"] = severitiesToNotifyForArray;
                    }
                    
                    if (request.Properties.TypesToNotifyFor != null)
                    {
                        JArray typesToNotifyForArray = new JArray();
                        foreach (AlertType typesToNotifyForItem in request.Properties.TypesToNotifyFor)
                        {
                            typesToNotifyForArray.Add(typesToNotifyForItem.ToString());
                        }
                        propertiesValue["typesToNotifyFor"] = typesToNotifyForArray;
                    }
                    
                    if (request.Properties.ShouldNotifyAdmins != null)
                    {
                        propertiesValue["shouldNotifyAdmins"] = request.Properties.ShouldNotifyAdmins.Value;
                    }
                    
                    if (request.Properties.ShouldNotifyCoAdmins != null)
                    {
                        propertiesValue["shouldNotifyCoAdmins"] = request.Properties.ShouldNotifyCoAdmins.Value;
                    }
                    
                    if (request.Properties.AdditionalRecipients != null)
                    {
                        JArray additionalRecipientsArray = new JArray();
                        foreach (string additionalRecipientsItem in request.Properties.AdditionalRecipients)
                        {
                            additionalRecipientsArray.Add(additionalRecipientsItem);
                        }
                        propertiesValue["additionalRecipients"] = additionalRecipientsArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NotificationConfigurationResponse result = null;
                    // Deserialize Response
                    result = new NotificationConfigurationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
