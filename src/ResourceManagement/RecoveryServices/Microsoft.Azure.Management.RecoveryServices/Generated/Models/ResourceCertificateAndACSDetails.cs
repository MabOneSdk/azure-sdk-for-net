// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Models
{
    using Azure;
    using Management;
    using RecoveryServices;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Certificate details representing the Vault credentials for ACS.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AccessControlService")]
    public partial class ResourceCertificateAndACSDetails : ResourceCertificateDetails
    {
        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndACSDetails
        /// class.
        /// </summary>
        public ResourceCertificateAndACSDetails() { }

        /// <summary>
        /// Initializes a new instance of the ResourceCertificateAndACSDetails
        /// class.
        /// </summary>
        /// <param name="certificate">The base64 encoded certificate raw data
        /// string.</param>
        /// <param name="resourceId">Vault resource id.</param>
        /// <param name="globalAcsNamespace">ACS namespace name - tenant for
        /// our service.</param>
        /// <param name="globalAcsHostName">Acs mgmt host name to connect
        /// to.</param>
        /// <param name="globalAcsRPRealm">Global ACS namespace RP
        /// realm.</param>
        /// <param name="subject">Certificate Subject Name.</param>
        /// <param name="validFrom">Certificate Validity start Date
        /// time.</param>
        /// <param name="validTo">Certificate Validity End Date time.</param>
        /// <param name="thumbprint">Certificate thumbrprint.</param>
        /// <param name="friendlyName">Certificate friendlyname.</param>
        /// <param name="issuer">Certificate issuer.</param>
        public ResourceCertificateAndACSDetails(string certificate = default(string), long? resourceId = default(long?), string globalAcsNamespace = default(string), string globalAcsHostName = default(string), string globalAcsRPRealm = default(string), string subject = default(string), System.DateTime? validFrom = default(System.DateTime?), System.DateTime? validTo = default(System.DateTime?), string thumbprint = default(string), string friendlyName = default(string), string issuer = default(string))
        {
            Certificate = certificate;
            ResourceId = resourceId;
            GlobalAcsNamespace = globalAcsNamespace;
            GlobalAcsHostName = globalAcsHostName;
            GlobalAcsRPRealm = globalAcsRPRealm;
            Subject = subject;
            ValidFrom = validFrom;
            ValidTo = validTo;
            Thumbprint = thumbprint;
            FriendlyName = friendlyName;
            Issuer = issuer;
        }

        /// <summary>
        /// Gets or sets the base64 encoded certificate raw data string.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public string Certificate { get; set; }

        /// <summary>
        /// Gets or sets vault resource id.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public long? ResourceId { get; set; }

        /// <summary>
        /// Gets or sets ACS namespace name - tenant for our service.
        /// </summary>
        [JsonProperty(PropertyName = "globalAcsNamespace")]
        public string GlobalAcsNamespace { get; set; }

        /// <summary>
        /// Gets or sets acs mgmt host name to connect to.
        /// </summary>
        [JsonProperty(PropertyName = "globalAcsHostName")]
        public string GlobalAcsHostName { get; set; }

        /// <summary>
        /// Gets or sets global ACS namespace RP realm.
        /// </summary>
        [JsonProperty(PropertyName = "globalAcsRPRealm")]
        public string GlobalAcsRPRealm { get; set; }

        /// <summary>
        /// Gets or sets certificate Subject Name.
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or sets certificate Validity start Date time.
        /// </summary>
        [JsonProperty(PropertyName = "validFrom")]
        public System.DateTime? ValidFrom { get; set; }

        /// <summary>
        /// Gets or sets certificate Validity End Date time.
        /// </summary>
        [JsonProperty(PropertyName = "validTo")]
        public System.DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or sets certificate thumbrprint.
        /// </summary>
        [JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets certificate friendlyname.
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets certificate issuer.
        /// </summary>
        [JsonProperty(PropertyName = "issuer")]
        public string Issuer { get; set; }

    }
}

