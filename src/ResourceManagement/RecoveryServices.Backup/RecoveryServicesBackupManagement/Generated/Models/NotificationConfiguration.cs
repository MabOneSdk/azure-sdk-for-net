// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Alert notification configuration.
    /// </summary>
    public partial class NotificationConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the NotificationConfiguration class.
        /// </summary>
        public NotificationConfiguration() { }

        /// <summary>
        /// Initializes a new instance of the NotificationConfiguration class.
        /// </summary>
        /// <param name="areNotificationsEnabled">Specifies if notifications
        /// are enabled.</param>
        /// <param name="frequencyDetails">Notification frequency
        /// details.</param>
        /// <param name="sourcesToNotifyFor">List of sources to notify
        /// to.</param>
        /// <param name="severitiesToNotifyFor">List of severities to notify
        /// about.</param>
        /// <param name="idsToNotifyFor">List of alert types / IDs to notify
        /// for.</param>
        /// <param name="additionalRecipients">Recipients list to send
        /// notification.</param>
        public NotificationConfiguration(bool? areNotificationsEnabled = default(bool?), NotificationFrequencyDetails frequencyDetails = default(NotificationFrequencyDetails), System.Collections.Generic.IList<SourceType?> sourcesToNotifyFor = default(System.Collections.Generic.IList<SourceType?>), System.Collections.Generic.IList<AlertSeverity?> severitiesToNotifyFor = default(System.Collections.Generic.IList<AlertSeverity?>), System.Collections.Generic.IList<AlertType?> idsToNotifyFor = default(System.Collections.Generic.IList<AlertType?>), System.Collections.Generic.IList<string> additionalRecipients = default(System.Collections.Generic.IList<string>))
        {
            AreNotificationsEnabled = areNotificationsEnabled;
            FrequencyDetails = frequencyDetails;
            SourcesToNotifyFor = sourcesToNotifyFor;
            SeveritiesToNotifyFor = severitiesToNotifyFor;
            IdsToNotifyFor = idsToNotifyFor;
            AdditionalRecipients = additionalRecipients;
        }

        /// <summary>
        /// Gets or sets specifies if notifications are enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "areNotificationsEnabled")]
        public bool? AreNotificationsEnabled { get; set; }

        /// <summary>
        /// Gets or sets notification frequency details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frequencyDetails")]
        public NotificationFrequencyDetails FrequencyDetails { get; set; }

        /// <summary>
        /// Gets or sets list of sources to notify to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcesToNotifyFor")]
        public System.Collections.Generic.IList<SourceType?> SourcesToNotifyFor { get; set; }

        /// <summary>
        /// Gets or sets list of severities to notify about.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severitiesToNotifyFor")]
        public System.Collections.Generic.IList<AlertSeverity?> SeveritiesToNotifyFor { get; set; }

        /// <summary>
        /// Gets or sets list of alert types / IDs to notify for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "idsToNotifyFor")]
        public System.Collections.Generic.IList<AlertType?> IdsToNotifyFor { get; set; }

        /// <summary>
        /// Gets or sets recipients list to send notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalRecipients")]
        public System.Collections.Generic.IList<string> AdditionalRecipients { get; set; }

    }
}
