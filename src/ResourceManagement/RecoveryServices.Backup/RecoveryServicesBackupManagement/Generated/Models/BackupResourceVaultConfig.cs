// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Backup resource vault config details.
    /// </summary>
    public partial class BackupResourceVaultConfig
    {
        /// <summary>
        /// Initializes a new instance of the BackupResourceVaultConfig class.
        /// </summary>
        public BackupResourceVaultConfig() { }

        /// <summary>
        /// Initializes a new instance of the BackupResourceVaultConfig class.
        /// </summary>
        /// <param name="storageType">Storage type. Possible values include:
        /// 'Invalid', 'GeoRedundant', 'LocallyRedundant'</param>
        /// <param name="storageTypeState">Locked or Unlocked. Once a machine
        /// is registered against a resource, the storageTypeState is always
        /// Locked. Possible values include: 'Invalid', 'Locked',
        /// 'Unlocked'</param>
        /// <param name="enhancedSecurityState">Enabled or Disabled. Possible
        /// values include: 'Invalid', 'Enabled', 'Disabled'</param>
        public BackupResourceVaultConfig(StorageType? storageType = default(StorageType?), StorageTypeState? storageTypeState = default(StorageTypeState?), EnhancedSecurityState? enhancedSecurityState = default(EnhancedSecurityState?))
        {
            StorageType = storageType;
            StorageTypeState = storageTypeState;
            EnhancedSecurityState = enhancedSecurityState;
        }

        /// <summary>
        /// Gets or sets storage type. Possible values include: 'Invalid',
        /// 'GeoRedundant', 'LocallyRedundant'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageType")]
        public StorageType? StorageType { get; set; }

        /// <summary>
        /// Gets or sets locked or Unlocked. Once a machine is registered
        /// against a resource, the storageTypeState is always Locked. Possible
        /// values include: 'Invalid', 'Locked', 'Unlocked'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageTypeState")]
        public StorageTypeState? StorageTypeState { get; set; }

        /// <summary>
        /// Gets or sets enabled or Disabled. Possible values include:
        /// 'Invalid', 'Enabled', 'Disabled'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enhancedSecurityState")]
        public EnhancedSecurityState? EnhancedSecurityState { get; set; }

    }
}
