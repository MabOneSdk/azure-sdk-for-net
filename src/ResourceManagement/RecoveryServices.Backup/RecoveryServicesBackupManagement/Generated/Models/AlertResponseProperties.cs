// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.RecoveryServices.Backup.Models
{
    using System.Linq;

    /// <summary>
    /// Alert Resource Properties.
    /// </summary>
    public partial class AlertResponseProperties
    {
        /// <summary>
        /// Initializes a new instance of the AlertResponseProperties class.
        /// </summary>
        public AlertResponseProperties() { }

        /// <summary>
        /// Initializes a new instance of the AlertResponseProperties class.
        /// </summary>
        /// <param name="alertTitle">Alert Title.</param>
        /// <param name="isManuallyResolvable">Alert Is Manually
        /// Resolvable.</param>
        /// <param name="initialOccurrenceTime">Alert Occurrence Time.</param>
        /// <param name="duration">Duration for which alert is active.</param>
        /// <param name="resolutionTime">Alert Resolution Time.</param>
        /// <param name="extendedInfo">Alert ExtendedInfo.</param>
        /// <param name="status">Status of the alert. Possible values include:
        /// 'Invalid', 'Active', 'Resolved'</param>
        /// <param name="category">Category the alert belongs to. Possible
        /// values include: 'Invalid', 'Infra', 'Jobs', 'Others',
        /// 'Security'</param>
        /// <param name="severity">Severity of the alert. Possible values
        /// include: 'Invalid', 'Critical', 'Warning', 'Information'</param>
        /// <param name="alertType">Type of the alert. Possible values include:
        /// 'Invalid', 'Backup', 'Recovery', 'RPHardening', 'DeferredDelete',
        /// 'Others'</param>
        /// <param name="instanceId">Alert Instance ID.</param>
        /// <param name="sourceName">Name of the data source for which this
        /// alert is raised.</param>
        /// <param name="affectedItems">List of Affected Items.</param>
        /// <param name="firstLevelContainerId">Id of top most parent container
        /// of DS.
        /// For exmaple ContainerId in case of DPM.</param>
        /// <param name="secondLevelContainerId">If there is a hierarchy of
        /// depth more than 2 then
        /// this field can be used to provide another container
        /// before specifying datasourceId. One can query at
        /// this level too. If hierarchy is only two levels deep then
        /// this can be left as null. For example this can be null in
        /// IaaSVM.</param>
        /// <param name="datasourceId">Id of datasource. This Id along with
        /// firstLevelContainerId
        /// (and second level if applicable) should uniquely identify a
        /// datasource inside a resource</param>
        /// <param name="sourceType">SourceType of alert / event. Possible
        /// values include: 'Invalid', 'IaaSVM', 'DPM', 'MAB', 'Others'</param>
        /// <param name="sourceVersion">Source type version.</param>
        public AlertResponseProperties(string alertTitle = default(string), bool? isManuallyResolvable = default(bool?), System.DateTime? initialOccurrenceTime = default(System.DateTime?), System.TimeSpan? duration = default(System.TimeSpan?), System.DateTime? resolutionTime = default(System.DateTime?), AlertDetailsExtendedInfo extendedInfo = default(AlertDetailsExtendedInfo), AlertStatus? status = default(AlertStatus?), AlertCategory? category = default(AlertCategory?), AlertSeverity? severity = default(AlertSeverity?), AlertType? alertType = default(AlertType?), string instanceId = default(string), string sourceName = default(string), System.Collections.Generic.IList<string> affectedItems = default(System.Collections.Generic.IList<string>), string firstLevelContainerId = default(string), string secondLevelContainerId = default(string), string datasourceId = default(string), SourceType? sourceType = default(SourceType?), string sourceVersion = default(string))
        {
            AlertTitle = alertTitle;
            IsManuallyResolvable = isManuallyResolvable;
            InitialOccurrenceTime = initialOccurrenceTime;
            Duration = duration;
            ResolutionTime = resolutionTime;
            ExtendedInfo = extendedInfo;
            Status = status;
            Category = category;
            Severity = severity;
            AlertType = alertType;
            InstanceId = instanceId;
            SourceName = sourceName;
            AffectedItems = affectedItems;
            FirstLevelContainerId = firstLevelContainerId;
            SecondLevelContainerId = secondLevelContainerId;
            DatasourceId = datasourceId;
            SourceType = sourceType;
            SourceVersion = sourceVersion;
        }

        /// <summary>
        /// Gets or sets alert Title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alertTitle")]
        public string AlertTitle { get; set; }

        /// <summary>
        /// Gets or sets alert Is Manually Resolvable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isManuallyResolvable")]
        public bool? IsManuallyResolvable { get; set; }

        /// <summary>
        /// Gets or sets alert Occurrence Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "initialOccurrenceTime")]
        public System.DateTime? InitialOccurrenceTime { get; set; }

        /// <summary>
        /// Gets or sets duration for which alert is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "duration")]
        public System.TimeSpan? Duration { get; set; }

        /// <summary>
        /// Gets or sets alert Resolution Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resolutionTime")]
        public System.DateTime? ResolutionTime { get; set; }

        /// <summary>
        /// Gets or sets alert ExtendedInfo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedInfo")]
        public AlertDetailsExtendedInfo ExtendedInfo { get; set; }

        /// <summary>
        /// Gets or sets status of the alert. Possible values include:
        /// 'Invalid', 'Active', 'Resolved'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public AlertStatus? Status { get; set; }

        /// <summary>
        /// Gets or sets category the alert belongs to. Possible values
        /// include: 'Invalid', 'Infra', 'Jobs', 'Others', 'Security'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public AlertCategory? Category { get; set; }

        /// <summary>
        /// Gets or sets severity of the alert. Possible values include:
        /// 'Invalid', 'Critical', 'Warning', 'Information'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severity")]
        public AlertSeverity? Severity { get; set; }

        /// <summary>
        /// Gets or sets type of the alert. Possible values include: 'Invalid',
        /// 'Backup', 'Recovery', 'RPHardening', 'DeferredDelete', 'Others'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alertType")]
        public AlertType? AlertType { get; set; }

        /// <summary>
        /// Gets or sets alert Instance ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceId")]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or sets name of the data source for which this alert is
        /// raised.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceName")]
        public string SourceName { get; set; }

        /// <summary>
        /// Gets or sets list of Affected Items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "affectedItems")]
        public System.Collections.Generic.IList<string> AffectedItems { get; set; }

        /// <summary>
        /// Gets or sets id of top most parent container of DS.
        /// For exmaple ContainerId in case of DPM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firstLevelContainerId")]
        public string FirstLevelContainerId { get; set; }

        /// <summary>
        /// Gets or sets if there is a hierarchy of depth more than 2 then
        /// this field can be used to provide another container
        /// before specifying datasourceId. One can query at
        /// this level too. If hierarchy is only two levels deep then
        /// this can be left as null. For example this can be null in IaaSVM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondLevelContainerId")]
        public string SecondLevelContainerId { get; set; }

        /// <summary>
        /// Gets or sets id of datasource. This Id along with
        /// firstLevelContainerId
        /// (and second level if applicable) should uniquely identify a
        /// datasource inside a resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "datasourceId")]
        public string DatasourceId { get; set; }

        /// <summary>
        /// Gets or sets sourceType of alert / event. Possible values include:
        /// 'Invalid', 'IaaSVM', 'DPM', 'MAB', 'Others'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceType")]
        public SourceType? SourceType { get; set; }

        /// <summary>
        /// Gets or sets source type version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceVersion")]
        public string SourceVersion { get; set; }

    }
}
